<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[熊爸天下]]></title>
  <link href="http://jimmy0328.github.io/atom.xml" rel="self"/>
  <link href="http://jimmy0328.github.io/"/>
  <updated>2016-07-03T17:23:47+08:00</updated>
  <id>http://jimmy0328.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Lin]]></name>
    <email><![CDATA[jimmy0328@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 ActionCable 做聊天室]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/07/03/actioncable-demo/"/>
    <updated>2016-07-03T12:11:35+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/07/03/actioncable-demo</id>
    <content type="html"><![CDATA[<h2>ActionCable Tutorial</h2>

<p>實作一個簡易的聊天室</p>

<h4>1. 建立 Rails Project</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails new livechat</span></code></pre></td></tr></table></div></figure>


<h4>2. 建立room controller</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g controller rooms show</span></code></pre></td></tr></table></div></figure>


<p>內容如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class RoomsController &lt; ApplicationController
</span><span class='line'>  def show
</span><span class='line'>    @messages = Message.all
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>3.建立Message model</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g message context:text</span></code></pre></td></tr></table></div></figure>


<p>rails db:migrate</p>

<h4>4. 修改View</h4>

<p>rooms/show.html.erb</p>

<p><img src="http://jimmy0328.github.io/images/actioncable/chat_view.png" width="400" alt="Alt text" /></p>

<p> 建立 messages/_message.html.erb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;message&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span> <span class="err">&lt;</span>%= message.context %&gt; <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>5. 建立ActionCable</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>rails g channel room speak
</span></code></pre></td></tr></table></div></figure>


<p>會產生</p>

<p>app/channels/room_channel.rb</p>

<p>app/assets/javascripts/channels/room.coffee</p>

<h5>6. routes 設定</h5>

<p>設定可以接受 cable 的 route</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>Rails.application.routes.draw do
</span><span class='line'>  root to: &#39;rooms#show&#39;
</span><span class='line'>  mount ActionCable.server =&gt; &#39;/cable&#39;
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>7. 修改 assets/javascripts/channels/room.coffee</h4>

<p>@perform &lsquo;speak&rsquo; 是指 speak chennel 要傳送的內容
註冊好 App.room 的 speak 與 received 之後，就在輸入框設定keypress 事情的listener</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>App.room = App.cable.subscriptions.create &quot;RoomChannel&quot;,
</span><span class='line'>  connected: -&gt;
</span><span class='line'>    # Called when the subscription is ready for use on the server
</span><span class='line'>
</span><span class='line'>  disconnected: -&gt;
</span><span class='line'>    # Called when the subscription has been terminated by the server
</span><span class='line'>
</span><span class='line'>  received: (data) -&gt;
</span><span class='line'>    $(&quot;#messages&quot;).append data[&#39;message&#39;]
</span><span class='line'>
</span><span class='line'>  speak: (message) -&gt;
</span><span class='line'>    @perform &#39;speak&#39;, message: message
</span><span class='line'>
</span><span class='line'>$(document).on &quot;keypress&quot;, &quot;[data-behavior~=room_speaker]&quot;, (event) -&gt;
</span><span class='line'>  if event.keyCode is 13
</span><span class='line'>    App.room.speak event.target.value
</span><span class='line'>    event.target.value = &#39;&#39;
</span><span class='line'>    event.preventDefault()
</span></code></pre></td></tr></table></div></figure>


<h4>8. 修改 Server side 的Room Channel</h4>

<p>修改 app/channels/room_channel.rb</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class RoomChannel <span class="nt">&lt; ApplicationCable::Channel</span>
</span><span class='line'>  <span class="na">def</span> <span class="na">subscribed</span>
</span><span class='line'>    <span class="na">stream_from</span> <span class="err">&quot;</span><span class="na">room_channel</span><span class="err">&quot;</span>
</span><span class='line'>  <span class="na">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">def</span> <span class="na">unsubscribed</span>
</span><span class='line'>    <span class="err">#</span> <span class="na">Any</span> <span class="na">cleanup</span> <span class="na">needed</span> <span class="na">when</span> <span class="na">channel</span> <span class="na">is</span> <span class="na">unsubscribed</span>
</span><span class='line'>  <span class="na">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">def</span> <span class="na">speak</span><span class="err">(</span><span class="na">data</span><span class="err">)</span>
</span><span class='line'>    <span class="na">Message</span><span class="err">.</span><span class="na">create</span> <span class="na">context:</span> <span class="na">data</span><span class="err">[&#39;</span><span class="na">message</span><span class="err">&#39;]</span>
</span><span class='line'>  <span class="na">end</span>
</span><span class='line'><span class="na">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>9. 使用ActiveJob 推送訊息</h4>

<p>Rails5 新增的 ApplicationControoler.renderer.render 功能
之後再來聊
總之這邊是broadcast messages/message 內容出去</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class MessageBroadcastJob <span class="nt">&lt; ApplicationJob</span>
</span><span class='line'>  <span class="na">queue_as</span> <span class="na">:default</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">def</span> <span class="na">perform</span><span class="err">(</span><span class="na">message</span><span class="err">)</span>
</span><span class='line'>    <span class="na">ActionCable</span><span class="err">.</span><span class="na">server</span><span class="err">.</span><span class="na">broadcast</span> <span class="err">&#39;</span><span class="na">room_channel</span><span class="err">&#39;,</span> <span class="na">message:</span> <span class="na">render_message</span><span class="err">(</span><span class="na">message</span><span class="err">)</span>
</span><span class='line'>  <span class="na">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="na">def</span> <span class="na">render_message</span><span class="err">(</span><span class="na">message</span><span class="err">)</span>
</span><span class='line'>    <span class="na">ApplicationController</span><span class="err">.</span><span class="na">renderer</span><span class="err">.</span><span class="na">render</span><span class="err">(</span><span class="na">partial:</span> <span class="err">&#39;</span><span class="na">messages</span><span class="err">/</span><span class="na">message</span><span class="err">&#39;,</span> <span class="na">locals:</span> <span class="err">{</span><span class="na">message:</span> <span class="na">message</span><span class="err">})</span>
</span><span class='line'>  <span class="na">end</span>
</span><span class='line'><span class="na">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>10. 修改 application.rb</h4>

<p>設定active_job 使用 sidekiq</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>class Application <span class="nt">&lt; Rails::Application</span>
</span><span class='line'>  <span class="err">#</span> <span class="na">Settings</span> <span class="na">in</span> <span class="na">config</span><span class="err">/</span><span class="na">environments</span><span class="err">/*</span> <span class="na">take</span> <span class="na">precedence</span> <span class="na">over</span> <span class="na">those</span> <span class="na">specified</span> <span class="na">here</span><span class="err">.</span>
</span><span class='line'>  <span class="err">#</span> <span class="na">Application</span> <span class="na">configuration</span> <span class="na">should</span> <span class="na">go</span> <span class="na">into</span> <span class="na">files</span> <span class="na">in</span> <span class="na">config</span><span class="err">/</span><span class="na">initializers</span>
</span><span class='line'>  <span class="err">#</span> <span class="na">--</span> <span class="na">all</span> <span class="err">.</span><span class="na">rb</span> <span class="na">files</span> <span class="na">in</span> <span class="na">that</span> <span class="na">directory</span> <span class="na">are</span> <span class="na">automatically</span> <span class="na">loaded</span><span class="err">.</span>
</span><span class='line'> <span class="na">config</span><span class="err">.</span><span class="na">active_job</span><span class="err">.</span><span class="na">queue_adapter =</span><span class="err"> </span><span class="s">:sidekiq</span>
</span><span class='line'><span class="na">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>11. 修改 environment/development.rb 及 production.rb</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>config.action_cable.disable_request_forgery_protection = true
</span></code></pre></td></tr></table></div></figure>


<h4>12. 修改 cable.yml</h4>

<p>在active job 我們是透過 redis 來處理server side 自己的 pub/sub</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>development:
</span><span class='line'>  adapter: redis
</span><span class='line'>  url: redis://localhost:6379/2
</span><span class='line'>
</span><span class='line'>test:
</span><span class='line'>  adapter: async
</span><span class='line'>
</span><span class='line'>production:
</span><span class='line'>  adapter: redis
</span><span class='line'>  url: redis://localhost:6379/1
</span></code></pre></td></tr></table></div></figure>


<h4>13. 完成</h4>

<p>大功告成，但一開始我沒有提到要先裝 redis 及 sidekiq
這邊完全是照著 <a href="https://blog.codeship.com/how-to-use-rails-active-job/">https://blog.codeship.com/how-to-use-rails-active-job/</a> DHH教學文來做的，但我也不知道為什麼他沒有設定redis也可以work, 總之因為要跑 active job 來推播，所以這個部份我有加了一些設定，否則其它全部都是一樣的</p>

<h2>參考資料來源</h2>

<p><a href="https://www.youtube.com/watch?v=n0WUjGkDFS0">https://www.youtube.com/watch?v=n0WUjGkDFS0</a>
<a href="http://edgeguides.rubyonrails.org/active_job_basics.html">http://edgeguides.rubyonrails.org/active_job_basics.html</a>
<a href="https://blog.codeship.com/how-to-use-rails-active-job/">https://blog.codeship.com/how-to-use-rails-active-job/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ActionCable入門]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/07/02/actioncable/"/>
    <updated>2016-07-02T22:40:23+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/07/02/actioncable</id>
    <content type="html"><![CDATA[<h2>認識 websocket</h2>

<p>我相信對於 Pub/Sub 這個名詞應該很多人都不陌生, 但在於web 的使用是近幾年比較多的，這邊不做深入的介紹，有興趣的自行google一下 polling 、long pulling、Streaming 。</p>

<p>在 HTML5 有支援 websocket 之後，開始有許多技術都出現了，server 主動推播訊息給 client 端的技術可以運用在太多地方了，有許多雲端的務服也開始陸訊出現，這些的一切都是為了實現 Real Time 的push 來誕生，例如： PubNub 、 Pusher 等。</p>

<p>HTML5 Websocket Protocol 連線後，透過 API 可以建立Real Time 即時送出訊息運用
<img src="https://www.websocket.org/img/websocket-architecture.jpg" width="800" alt="Alt text" /></p>

<p>有興趣的可以參考
<a href="https://www.websocket.org/aboutwebsocket.html">https://www.websocket.org/aboutwebsocket.html</a></p>

<p>之後有空在來談論一下以上這些技術，今天要來介紹的是 Rails 5 中最大的亮點之一的 <code>Action Cable</code></p>

<h2>認識 Action Cable</h2>

<p>幾個專有名</p>

<ul>
<li><p>Connection
在 Rails 5 中是指 <code>ApplicationCable::Connection</code>
用來建立 Cable 的連線</p></li>
<li><p>Channel
在 Rails 5 中是指 <code>ApplicationCable::Channel</code></p>

<p>可以建立多條 Channel ，例如 聊天室可能就可以建立一個 room channel</p></li>
<li><p>Streams
用來把 client 送出的訊息傳送給 Subscribers</p></li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CommentsChannel.broadcast_to(@post, @comment)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Broadcasting
舉例說明，在聊天室中要傳送訊息出去，就是用 broadcasting 的機制，讓其它人可以同步收到訊息</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>WebNotificationsChannel.broadcast_to(
</span><span class='line'>current_user,
</span><span class='line'>  title: 'New things!',
</span><span class='line'>  body: 'All the news fit to print'
</span><span class='line'>)</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Subscriptions
同Broadcasting , Subscriptions 就是為了接收有人 broadcasting 的資料。
所以有接到資料的要實作內容。例如：在聊天室中收到訊息的就會把訊息更新到畫面中</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>App.cable.subscriptions.create { channel: "ChatChannel", room: "Best Room" },
</span><span class='line'>  received: (data) -&gt;
</span><span class='line'>    @appendLine(data)
</span><span class='line'>
</span><span class='line'>  appendLine: (data) -&gt;
</span><span class='line'>    html = @createLine(data)
</span><span class='line'>    $("[data-chat-room='Best Room']").append(html)
</span></code></pre></td></tr></table></div></figure>


<h2>架構圖</h2>

<p><img src="https://heroku-blog-files.s3.amazonaws.com/1462551406-rails-rack.png" width="800" alt="Alt text" /></p>

<p>資料來源
<a href="https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable">https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable</a></p>

<p>明天再來實作一個聊天室的文章</p>

<h2>參考資料來源</h2>

<p><a href="http://guides.rubyonrails.org/action_cable_overview.html">http://guides.rubyonrails.org/action_cable_overview.html</a>
<a href="https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable">https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在Rails中安裝React]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/30/react-in-rails/"/>
    <updated>2016-06-30T23:55:11+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/30/react-in-rails</id>
    <content type="html"><![CDATA[<h2>安裝 react gem</h2>

<p>Gemfile 中加入
使用 sprockets-es6 來寫ES6</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'react-rails'
</span><span class='line'>gem 'sprockets-es6', require: "sprockets/es6"</span></code></pre></td></tr></table></div></figure>


<p>bundle install</p>

<h2>安裝 react 檔案</h2>

<p>會建立相關的檔案</p>

<p>執行 <code>rails g react:install</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g react:install</span></code></pre></td></tr></table></div></figure>


<p>會建立相關的檔案</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Running via Spring preloader in process 15876
</span><span class='line'>create  app/assets/javascripts/components
</span><span class='line'>create  app/assets/javascripts/components/.gitkeep
</span><span class='line'>insert  app/assets/javascripts/application.js
</span><span class='line'>insert  app/assets/javascripts/application.js
</span><span class='line'>insert  app/assets/javascripts/application.js
</span><span class='line'>create  app/assets/javascripts/components.js</span></code></pre></td></tr></table></div></figure>


<h2>修改 application.js</h2>

<p>app/assets/javascripts/application.js</p>

<p>把turbolinks 及 tree 移除，加入 react, react_ujs, components 目錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> //= require jquery
</span><span class='line'> //= require jquery_ujs
</span><span class='line'> //= require react
</span><span class='line'> //= require react_ujs
</span><span class='line'> //= require components</span></code></pre></td></tr></table></div></figure>


<h2>修改環境設定檔</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># config/environments/development.rb
</span><span class='line'>MyApp::Application.configure do
</span><span class='line'>  config.react.variant = :development
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># config/environments/production.rb
</span><span class='line'>MyApp::Application.configure do
</span><span class='line'>  config.react.variant = :production
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>啟用 react-addons</h2>

<p>在 application.rb 中啟用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MyApp::Application.configure do
</span><span class='line'>  config.react.addons = true # defaults to false
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>撰寫第一支react</h2>

<p>新增 <code>app/assets/javascripts/components/hello.es6</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>window.Home = ( window.Home || {} );
</span><span class='line'>window.Home = class Home extends React.Component{
</span><span class='line'>
</span><span class='line'>  constructor(props){
</span><span class='line'>    super(props);
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  render(){
</span><span class='line'>    return(
</span><span class='line'>      &lt;div&gt;
</span><span class='line'>        Hello React and Rails
</span><span class='line'>      &lt;/div&gt;
</span><span class='line'>    );
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>在 view 中加上 component, 例如在 &lsquo; home/index.html.erb &rsquo;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= react_component("Home.Index")%&gt;</span></code></pre></td></tr></table></div></figure>


<p>大功告成, 測試看看有沒有成功</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Use Mixpanel]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/29/mixpanel/"/>
    <updated>2016-06-29T23:11:50+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/29/mixpanel</id>
    <content type="html"><![CDATA[<h2>什麼是Mixpanel</h2>

<p>現在的網站越來越多平台為了監控使用者行為分析，所以大多數人平台都會導入 GA (Google Analytics)，除了很方便整合外，這個服務也是免費的。
除了GA 外，Mixpanel 這個服務也是一個很強的資料分析平台服務，至於 mixpanel 的功能，這邊不多做介紹 ，快去申請一個來用就對了</p>

<p><a href="https://mixpanel.com">https://mixpanel.com</a></p>

<h2>使用mixpanel gem</h2>

<h4>- Gemfile 中加入</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'mixpanel-ruby'</span></code></pre></td></tr></table></div></figure>


<p>bundle install</p>

<h4>- 設定mixpanel token</h4>

<p>application.rb
在application config 裡 init mixpanel</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>config.after_initialize do
</span><span class='line'>  config.mixpanel = Mixpanel::Tracker.new(secrets.mixpanel[:token])
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>我這邊是把 mixpanel 的token 放在 secret.yml，所以寫法上可以用 <code>secrets.mixpanel[:token]</code> 拿到token</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>略
</span><span class='line'>development:
</span><span class='line'>  secret_key_base:
</span><span class='line'>  mixpanel:
</span><span class='line'>    :token: 0000000000000000000000000</span></code></pre></td></tr></table></div></figure>


<p>mixpanel 的token在下圖可以找到</p>

<p><img src="http://jimmy0328.github.io/images/mixpanel/mixpanel.png" width="800" alt="Alt text" /></p>

<h2>簡單的在 Rails中實現 Mixpanel Gem</h2>

<p>在application_controller.rb 中加上</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>delegate :mixpanel, to: :"Rails.configuration"
</span><span class='line'>before_action do
</span><span class='line'>  mixpanel.track("User", "Test", {event: 'test', description: 'test context'})
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>大功告成，這樣只要有request 進到controller 的就都會送Event 給 mixpanel 了
<img src="http://jimmy0328.github.io/images/mixpanel/mixpanel_event.png" width="800" alt="Alt text" /></p>

<p>之後會再補上如何有效的加上Event 事件送給 mixpanel</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Rspec 搭配 Shoulda-matchers 測試 Model 及 Controller]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/25/rspec-test-model-controller/"/>
    <updated>2016-06-25T20:09:23+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/25/rspec-test-model-controller</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<p>在上一章有介紹怎麼安裝, 在這章會介紹幾個重要的觀念及用法</p>

<h4>1. describe 及 context</h4>

<p>這二個都是用來做分類使用的，例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe Post do
</span><span class='line'>
</span><span class='line'>  context "when post is valid" do
</span><span class='line'>   ...
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  context "when post is invalid" do
</span><span class='line'>   ...
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>2. 使用 it 與 expect</h4>

<p>可以用這二個來做小片斷的測試</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>describe Post do
</span><span class='line'>
</span><span class='line'>  context "when post is valid" do
</span><span class='line'>
</span><span class='line'>    it "should post if user is broker" do
</span><span class='line'>     ....
</span><span class='line'>     post = Post.create(title: 'test', context: 'test description')
</span><span class='line'>     略
</span><span class='line'>     expect(post.title).to eq("test")
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    it "should post if user is operator" do
</span><span class='line'>     ...
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  context "when post is invalid" do
</span><span class='line'>   ...
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>安裝 shoulda-matcher</h2>

<h4>1. 修改 Gemfile</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails-rspec'
</span><span class='line'>gem 'shoulda-matchers', require: "shoulda/matchers"</span></code></pre></td></tr></table></div></figure>


<h4>2. bundle install</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/thoughtbot/shoulda-matchers">https://github.com/thoughtbot/shoulda-matchers</a></p>

<h4>3. rails_helper.rb 加入設定</h4>

<p>在最下面加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(略)
</span><span class='line'>Shoulda::Matchers.configure do |config|
</span><span class='line'>  config.integrate do |with|
</span><span class='line'>    with.test_framework :rspec
</span><span class='line'>    with.library :active_record
</span><span class='line'>    with.library :active_model
</span><span class='line'>    with.library :action_controller
</span><span class='line'>    with.library :rails
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>使用 shoulda-matchers 來簡化測試</p>

<h2>測試 model</h2>

<p>首先修改一下model, shoulda-matcher 提供了方便的helper，常見的如下</p>

<ul>
<li>ActionModel matchers</li>
<li>ActionRecord matchers</li>
<li>ActionController matchers</li>
</ul>


<p>測試model 當然是用 ActionModel matchers 的helper 來使用，例如: 必填欄位就可以使用 <code>validate_presence_of</code></p>

<p>spec/models/post_spec.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rails_helper'
</span><span class='line'>
</span><span class='line'>RSpec.describe Post, type: :model do
</span><span class='line'>
</span><span class='line'>  it { should validate_presence_of(:title) }
</span><span class='line'>  it { should validate_presence_of(:context) }
</span><span class='line'>  it { should belong_to(:user) }
</span><span class='line'>
</span><span class='line'>  it "valid attributes" do
</span><span class='line'>    expect(Post.new).not_to be_valid
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  it "valid attributes" do
</span><span class='line'>    post = Post.create!(title: 'test', context: 'test')
</span><span class='line'>    expect(post).to be_valid
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>測試 controller</h2>

<p>controller 可以寫到很細，這邊先用 index 及 create 做個簡單的sample</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rails_helper'
</span><span class='line'>
</span><span class='line'>RSpec.describe PostsController, type: :controller do
</span><span class='line'>
</span><span class='line'>  describe "GET #index" do
</span><span class='line'>
</span><span class='line'>    it "renders the index template" do
</span><span class='line'>      get :index
</span><span class='line'>      expect(response).to render_template("index")
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>    it "responds successfully with an HTTP 200 status code" do
</span><span class='line'>      get :index
</span><span class='line'>      expect(response).to be_success
</span><span class='line'>      expect(response).to have_http_status(200)
</span><span class='line'>    end
</span><span class='line'>
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  describe "POST #create" do
</span><span class='line'>
</span><span class='line'>    it "can create" do
</span><span class='line'>      expect{
</span><span class='line'>       post :create, post: {title: 'test', context: 'test'} ,format: :json
</span><span class='line'>      }.to change{
</span><span class='line'>        Post.count
</span><span class='line'>      }.by(1)
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>除了RSpec + shoulda_matcher 外，在測試上我們也會搭配factory_girl 及 faker 來做一些 fake data 的處理，之後有空來再補這個部份的介紹</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec in Rails 安裝篇]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/25/rspec-in-rails-install/"/>
    <updated>2016-06-25T17:08:12+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/25/rspec-in-rails-install</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<h2>安裝</h2>

<h4>Gemfile 加入 rspec-rails</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>group :development do
</span><span class='line'>(略)
</span><span class='line'>gem 'rspec-rails', '~&gt; 3.4'
</span><span class='line'>(略)
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>bundle install</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h4>install rspec</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails generate rspec:install
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/install_rspec.png" width="400" alt="Alt text" /></p>

<h4>add model rspec</h4>

<p>app/models/post.rb</p>

<p>post model add validates</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>validates :title, :context, presence: true</span></code></pre></td></tr></table></div></figure>


<p>spec/models/post_spec.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'rails_helper'
</span><span class='line'>
</span><span class='line'>RSpec.describe Post, type: :model do
</span><span class='line'>
</span><span class='line'>  it "valid attributes" do
</span><span class='line'>    expect(Post.new).not_to be_valid
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  it "valid attributes" do
</span><span class='line'>    post = Post.create!(title: 'test', context: 'test')
</span><span class='line'>    expect(post).to be_valid
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>測試</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>spec spec/models/post_spec.rb</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/test_pass.png" width="400" alt="Alt text" /></p>

<h4>參考資料</h4>

<p><a href="https://github.com/rspec/rspec-rails#model-specs">https://github.com/rspec/rspec-rails#model-specs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 多國語系－資料庫]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/24/rails-global/"/>
    <updated>2016-06-24T23:46:43+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/24/rails-global</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<p>在上一篇 <a href="http://jimmy0328.github.io/blog/2016/06/23/rails-i18n/">Rails 多國語系-rails_i18n</a> 是使用 rails-i18n 來達到多國語系，設定的方式大多都是使用yml 的設定檔來建立不同的語系，所以一旦你的平台是內容的多國語系，這個時侯就變成要時常在修改locale的yml檔，相當沒有彈性。</p>

<p>使用 globalize 可以把多國語系建立在資料庫中，所以可以直修改data就可以維護多國語系了</p>

<h2>安裝</h2>

<h4>1. gem install globalize</h4>

<p>globalize 這個gem 似乎問題不小，在rails 4.2.3 跑 官方的 master branch 是有問題的
加上 Rails5 又有些不一樣了，改天再來在Rails5測試看看，總之以下方式是在 Rails5 是無法執行的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails-i18n'
</span><span class='line'>gem 'globalize', git: "git@github.com:globalize/globalize.git"</span></code></pre></td></tr></table></div></figure>


<h4>2. bundle install</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h4>3. 建立 translations</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g migration create_post_translation</span></code></pre></td></tr></table></div></figure>


<h4>4. 修改 migration 檔案</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class CreatePostTranslations &lt; ActiveRecord::Migration
</span><span class='line'>  def self.up
</span><span class='line'>    Post.create_translation_table!({
</span><span class='line'>      :title =&gt; :string,
</span><span class='line'>      :context =&gt; :text
</span><span class='line'>    }, {
</span><span class='line'>      :migrate_data =&gt; true
</span><span class='line'>    })
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def self.down
</span><span class='line'>    Post.drop_translation_table! :migrate_data =&gt; true
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>5. 修改 model</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Post &lt; ActiveRecord::Base
</span><span class='line'>  translates :title, :context
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>6. 修改config/application.rb</h4>

<p>加入</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>略
</span><span class='line'>config.i18n.fallbacks = true
</span><span class='line'>略</span></code></pre></td></tr></table></div></figure>


<h4>7. rake db:migrate</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>如果到這邊是順利的，那應該就表示成功了，否則應該就是版本上有些問題，可能又要再google 一下了</p>

<h2>測試</h2>

<ol>
<li><p>rails console</p></li>
<li><p>測試建立資料</p></li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>I18n.locale = :en
</span><span class='line'>
</span><span class='line'>Post.create({ title: "test1", context: "test1"})
</span><span class='line'>
</span><span class='line'>I18n.locale = :"zh-TW"
</span><span class='line'>
</span><span class='line'>post = Post.last
</span><span class='line'>post.title = "測試"
</span><span class='line'>post.save
</span></code></pre></td></tr></table></div></figure>


<p>大功告成，此時在 locale = :en 的 title 是 <code>test1</code>, 而 locale = :&ldquo;zh-TW&rdquo; 的 title 是 <code>測試</code></p>

<h2>參考資料</h2>

<ul>
<li><p><a href="https://github.com/ncri/globalize">https://github.com/ncri/globalize</a></p></li>
<li><p><a href="http://railscasts.com/episodes/338-globalize3?autoplay=true">http://railscasts.com/episodes/338-globalize3?autoplay=true</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 多國語系- Rails_i18n]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/23/rails-i18n/"/>
    <updated>2016-06-23T23:49:43+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/23/rails-i18n</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<p>在Rails中要實現多國語系是一件很簡單的事，只要安裝 rails-i18n 就可以很輕鬆的實現了</p>

<h2>安裝</h2>

<h5>安裝 rails-i18n</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'rails-i18n'</span></code></pre></td></tr></table></div></figure>


<p>記得 bundle install</p>

<h4>在application.rb 中宣告</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>略
</span><span class='line'>config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '**', '*.{rb,yml}').to_s]
</span><span class='line'>config.i18n.default_locale = :"zh-TW"
</span><span class='line'>config.i18n.available_locales = [:en, :"zh-TW"]
</span><span class='line'>略</span></code></pre></td></tr></table></div></figure>


<p>在application_controller.rb 中加入 locale 的判斷
我們希望在url後面帶上locale來改變語系，例如: locale=en</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>略
</span><span class='line'>
</span><span class='line'>before_action :set_locale
</span><span class='line'>
</span><span class='line'>def set_locale
</span><span class='line'>  if params[:locale] && I18n.available_locales.include?( params[:locale].to_sym )
</span><span class='line'>     session[:locale] = params[:locale]
</span><span class='line'>  end
</span><span class='line'>   I18n.locale = session[:locale] || I18n.default_locale
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>略</span></code></pre></td></tr></table></div></figure>


<h2>設定多國語系的內容</h2>

<p>以中文與英文二個語系為例
在locales中加入</p>

<p><img src="http://jimmy0328.github.io/images/i18n/locale_folder.png" alt="Alt text" /></p>

<p>locales/post/en.yml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>en:
</span><span class='line'>  post:
</span><span class='line'>    title: "Title"
</span><span class='line'>    context: "Context"</span></code></pre></td></tr></table></div></figure>


<p>locales/post/zh-TW.yml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zh-TW:
</span><span class='line'>  post:
</span><span class='line'>    title: "標題"
</span><span class='line'>    context: "內容"</span></code></pre></td></tr></table></div></figure>


<h2>使用方式</h2>

<p>在 erb 中使用 t(&ldquo;yml的設定方式&rdquo;)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>略
</span><span class='line'>  &lt;thead&gt;
</span><span class='line'>    &lt;tr&gt;
</span><span class='line'>      &lt;th&gt;&lt;%= t("post.title") %&gt;&lt;/th&gt;
</span><span class='line'>      &lt;th&gt;&lt;%= t("post.context") %&gt;&lt;/th&gt;
</span><span class='line'>      &lt;th colspan="3"&gt;&lt;/th&gt;
</span><span class='line'>    &lt;/tr&gt;
</span><span class='line'>  &lt;/thead&gt;
</span><span class='line'>略
</span></code></pre></td></tr></table></div></figure>


<h2>測試</h2>

<p><a href="http://localhost:3000?locale=en">http://localhost:3000?locale=en</a></p>

<p><img src="http://jimmy0328.github.io/images/i18n/locale_test_en.png" alt="Alt text" /></p>

<p><a href="http://localhost:3000?locale=zh-TW">http://localhost:3000?locale=zh-TW</a></p>

<p><img src="http://jimmy0328.github.io/images/i18n/locale_test_zh.png" alt="Alt text" /></p>

<h2>參考資料</h2>

<p><a href="http://guides.rubyonrails.org/i18n.html">http://guides.rubyonrails.org/i18n.html</a>
<a href="http://juanitofatas.com/2014/06/25/rails-i18n-intro/">http://juanitofatas.com/2014/06/25/rails-i18n-intro/</a>
<a href="https://github.com/svenfuchs/rails-i18n">https://github.com/svenfuchs/rails-i18n</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Webpack 介紹]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/23/webpack/"/>
    <updated>2016-06-23T00:16:21+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/23/webpack</id>
    <content type="html"><![CDATA[<h2>why webpack</h2>

<p>It&rsquo;s like browserify but can split your app into multiple files. If you have multiple pages in a single-page app, the user only downloads code for just that page. If they go to another page, they don&rsquo;t redownload common code.</p>

<p>It often replaces grunt or gulp because it can build and bundle CSS, preprocessed CSS, compile-to-JS languages and images, among other things.</p>

<p>[webpack howto] (<a href="https://github.com/petehunt/webpack-howto#1-why-webpack">https://github.com/petehunt/webpack-howto#1-why-webpack</a>)</p>

<p>還沒有時間消化，先整理在以下圖表</p>

<table>
<thead>
<tr>
<th style="text-align:left;">參數 </th>
<th style="text-align:left;"> 說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;">javascript </td>
<td style="text-align:left;"> <a href="https://github.com/petehunt/webpack-howto#4-compile-to-js-languages">https://github.com/petehunt/webpack-howto#4-compile-to-js-languages</a></td>
</tr>
<tr>
<td style="text-align:left;">stylesheets and image </td>
<td style="text-align:left;"> <a href="https://github.com/petehunt/webpack-howto#5-stylesheets-and-images">https://github.com/petehunt/webpack-howto#5-stylesheets-and-images</a></td>
</tr>
<tr>
<td style="text-align:left;">multi entrypoints </td>
<td style="text-align:left;"> <a href="https://github.com/petehunt/webpack-howto#7-multiple-entrypoints">https://github.com/petehunt/webpack-howto#7-multiple-entrypoints</a></td>
</tr>
<tr>
<td style="text-align:left;">Async loading </td>
<td style="text-align:left;"> <a href="https://github.com/petehunt/webpack-howto#9-async-loading">https://github.com/petehunt/webpack-howto#9-async-loading</a></td>
</tr>
</tbody>
</table>


<h2>如何執行 webpack</h2>

<p> 在下面的安裝做完之後，可以回來這邊測試一下</p>

<ul>
<li>webpack <code>for building once for development</code></li>
<li>webpack -p <code>for building once for production (minification)</code></li>
<li>webpack &ndash;watch <code>for continuous incremental build in development (fast!)</code></li>
<li>webpack -d <code>to include source maps</code></li>
</ul>


<p>[webpack howto] (<a href="https://github.com/petehunt/webpack-howto#3-how-to-invoke-webpack">https://github.com/petehunt/webpack-howto#3-how-to-invoke-webpack</a>)</p>

<h2>說明</h2>

<p>簡單的說，他是在幫忙處理前端效能最佳化工具的一種，載入你要載入的程式，把 <strong>css, js, image&hellip; 等</strong>多個檔案的，分別壓縮成一支程式</p>

<h2>安裝</h2>

<h3>npm init</h3>

<p>安裝完畢會產生一支 package.json</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm init</span></code></pre></td></tr></table></div></figure>


<h3>安裝react 並且與dependency 一起裝</h3>

<p>此時會把相關的套件一起安裝，並且放在 node_modules的目錄下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install react react-dom --save</span></code></pre></td></tr></table></div></figure>


<h3>安裝 babel</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install babel-loader babel-core babel-preset-es2015 babel-preset-react</span></code></pre></td></tr></table></div></figure>


<h3>新增 webpack.config.js</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch webpack.config.js</span></code></pre></td></tr></table></div></figure>


<p>內容如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>module.exports = {
</span><span class='line'>  entry: './main.js',
</span><span class='line'>  output: {
</span><span class='line'>     path: './',
</span><span class='line'>     filename: 'index.js',
</span><span class='line'>  },
</span><span class='line'>  devServer: {
</span><span class='line'>    inline: true,
</span><span class='line'>    port: 8888
</span><span class='line'>  },
</span><span class='line'>  module:{
</span><span class='line'>    loaders: [
</span><span class='line'>      {
</span><span class='line'>        text: /\.js$/,
</span><span class='line'>        exclude: /node_modules/,
</span><span class='line'>        loader: 'babel',
</span><span class='line'>        query: {
</span><span class='line'>          presets: ['es2015', 'react']
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    ]
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>[webpack howto] (https://github.com/petehunt/webpack-howto#4-compile-to-js-languages)</span></code></pre></td></tr></table></div></figure>


<h3>新增幾支要測試的程式</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch index.html App.js main.js</span></code></pre></td></tr></table></div></figure>


<p>index.html</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html&gt;
</span><span class='line'> &lt;head&gt;
</span><span class='line'>   &lt;meta charset="UTF-8"&gt;
</span><span class='line'>   &lt;title&gt; webpack test &lt;/title&gt;
</span><span class='line'> &lt;/head&gt;
</span><span class='line'> &lt;body&gt;
</span><span class='line'>   &lt;div id="app"&gt;&lt;/div&gt;
</span><span class='line'>   &lt;script src="index.js"&gt; &lt;/script&gt;
</span><span class='line'> &lt;/body&gt;
</span><span class='line'>&lt;/html&gt;</span></code></pre></td></tr></table></div></figure>


<p>App.js</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React from 'react';
</span><span class='line'>class App extends React.Component{
</span><span class='line'>
</span><span class='line'>  render(){
</span><span class='line'>    return(
</span><span class='line'>      &lt;div&gt; Hello, My first webpack page &lt;/div&gt;
</span><span class='line'>    )
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>export default App</span></code></pre></td></tr></table></div></figure>


<p>main.js</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import React from 'react';
</span><span class='line'>import ReactDOM from 'react-dom';
</span><span class='line'>import App from './App'
</span><span class='line'>
</span><span class='line'>ReactDOM.render(&lt;App /&gt;, document.getElementById('app'));</span></code></pre></td></tr></table></div></figure>


<h3>修改package.json</h3>

<p>我們修改可以透過 webpac-dev-server 來啟動
webpack-dev-server 是個小型的 node.js express server, 所以在啟動project我們會用到它</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "name": "webpack_sample",
</span><span class='line'>  "version": "1.0.0",
</span><span class='line'>  "description": "",
</span><span class='line'>  "main": "index.js",
</span><span class='line'>  "scripts": {
</span><span class='line'>    "start": "webpack-dev-server"
</span><span class='line'>  },
</span><span class='line'>  "author": "",
</span><span class='line'>  "license": "ISC",
</span><span class='line'>  "dependencies": {
</span><span class='line'>    "react": "^15.1.0",
</span><span class='line'>    "react-dom": "^15.1.0"
</span><span class='line'>  }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<h3>大功告成，測試吧</h3>

<p><a href="http://localhost:8888">http://localhost:8888</a></p>

<h2>參考資料</h2>

<ul>
<li><p><a href="https://github.com/petehunt/webpack-howto">https://github.com/petehunt/webpack-howto</a></p></li>
<li><p><a href="https://rhadow.github.io/2015/03/23/webpackIntro/">https://rhadow.github.io/2015/03/23/webpackIntro/</a></p></li>
<li><p><a href="https://egghead.io/lessons/react-react-fundamentals-development-environment-setup?course=react-fundamentals">https://egghead.io/lessons/react-react-fundamentals-development-environment-setup?course=react-fundamentals</a></p></li>
<li><p><a href="https://github.com/petehunt/webpack-howto/blob/master/README-zh.md">https://github.com/petehunt/webpack-howto/blob/master/README-zh.md</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails5 Job With Sidekiq]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/21/rails5-job-with-sidekiq/"/>
    <updated>2016-06-21T16:38:19+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/21/rails5-job-with-sidekiq</id>
    <content type="html"><![CDATA[<p>以下都是以Mac環境為例，linux 及 window 就不好意思了</p>

<h2>安裝 sidekiq</h2>

<h4>1. 首先，你的電腦必須安裝 Redis 資料庫，可以使用 Homebrew 安裝</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install redis
</span></code></pre></td></tr></table></div></figure>


<h4>2. 在 Gemfile 中加入</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'sidekiq'</span></code></pre></td></tr></table></div></figure>


<h4>3. bundle install</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle install</span></code></pre></td></tr></table></div></figure>


<h4>4.加入 Job</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rails g job inspector</span></code></pre></td></tr></table></div></figure>


<p>會產生 jobs 目錄及 一支 inspector_job.rb</p>

<h4>5. 在inspector_job 中加入實作</h4>

<p>在jobs/inspector_job.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class InspectorJob &lt; ApplicationJob
</span><span class='line'>  queue_as :default
</span><span class='line'>
</span><span class='line'>  def perform(*args)
</span><span class='line'>    puts "================== print inspector Job ============="
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>6. 宣告 job 使用sidekiq 來處理</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># in /config/application.rb
</span><span class='line'>class Application &lt; Rails::Application
</span><span class='line'>  # ...
</span><span class='line'>  config.active_job.queue_adapter = :sidekiq
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>7. 加入redis 的config</h4>

<p>新增 initializers/sidekiq.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Sidekiq.configure_server do |config|
</span><span class='line'>  config.redis = Rails.application.secrets.redis
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Sidekiq.configure_client do |config|
</span><span class='line'>  config.redis = Rails.application.secrets.redis
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>8. redis 的連線我寫在secret.yml</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>略
</span><span class='line'>development:
</span><span class='line'>   secret_key_base:
</span><span class='line'>   redis:
</span><span class='line'>    :url: redis://localhost:6379
</span><span class='line'>略</span></code></pre></td></tr></table></div></figure>


<h4>9. 執行Job</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>InspectorJob.perform_later("xxxx")
</span></code></pre></td></tr></table></div></figure>


<h4>10.  Run the worker</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec sidekiq -e development</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>worker: bundle exec sidekiq -c 10 -q priority -q default</span></code></pre></td></tr></table></div></figure>


<h2>安裝sidekiq web UI</h2>

<h4>1. route.rb 加入</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'sidekiq/web'
</span><span class='line'>
</span><span class='line'>Rails.application.routes.draw do
</span><span class='line'>...
</span><span class='line'>  mount Sidekiq::Web, at: '/sidekiq'
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>2. gemfile 加入</h4>

<p>Rails5 要用 sinatra master 的版本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'sinatra', github: 'sinatra'</span></code></pre></td></tr></table></div></figure>


<h4>3. 查看 web UI</h4>

<p><a href="http://localhost:3000/sidekiq">http://localhost:3000/sidekiq</a></p>

<h2>測試</h2>

<h4>1. 在專案下先執行sidekiq</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sidekiq</span></code></pre></td></tr></table></div></figure>


<h3>2. rails console</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>InspectorJob.perform_later("xxx")</span></code></pre></td></tr></table></div></figure>


<h4>3.sidekiq log 會印出</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2016-06-21T08:16:45.734Z 28527 TID-owmgdm1ak InspectorJob JID-fe520b589d7cbdbaa1f3bd5c INFO: start
</span><span class='line'>================== print inspector Job =============
</span><span class='line'>2016-06-21T08:16:45.738Z 28527 TID-owmgdm1ak InspectorJob JID-fe520b589d7cbdbaa1f3bd5c INFO: done: 0.004 sec</span></code></pre></td></tr></table></div></figure>


<h2>參考資料來源</h2>

<p><a href="http://railscasts.com/episodes/366-sidekiq">http://railscasts.com/episodes/366-sidekiq</a>
<a href="http://kakas-blog.logdown.com/posts/738075-used-in-rails-sidekiq">http://kakas-blog.logdown.com/posts/738075-used-in-rails-sidekiq</a>
<a href="https://www.rubyplus.com/articles/3931-Rails-5-ActiveJob-Basics-with-Sidekiq">https://www.rubyplus.com/articles/3931-Rails-5-ActiveJob-Basics-with-Sidekiq</a>
<a href="http://epigene.github.io/Rails5_Redis_And_Sidekiq/">http://epigene.github.io/Rails5_Redis_And_Sidekiq/</a>
<a href="http://github.com/mperham/sidekiq/wiki/The-Basics">http://github.com/mperham/sidekiq/wiki/The-Basics</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 中的block 及 Proc]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/21/ruby-block-proc/"/>
    <updated>2016-06-21T11:23:17+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/21/ruby-block-proc</id>
    <content type="html"><![CDATA[<h2>Block</h2>

<p>目前最常見的寫法都是用block，主要是使用 do end 來構成一個block，例如</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</span><span class='line'>
</span><span class='line'>arr.collect! do |n|
</span><span class='line'>  n * 2
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>自己來寫一個看看</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Array
</span><span class='line'>  def foreach
</span><span class='line'>    self.each_with_index do |n, i|
</span><span class='line'>      self[i] = yield(n)
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</span><span class='line'>arr.foreach do |n|
</span><span class='line'>  n * 2
</span><span class='line'>end
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Proc</h2>

<p>這二種寫proc都可以</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proc = Proc.new { puts "this is proc new"}
</span><span class='line'>proc.call
</span><span class='line'>
</span><span class='line'>proc = Proc.new do
</span><span class='line'>  puts "this is proc block too"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>proc.call
</span></code></pre></td></tr></table></div></figure>


<p>使用lambda 的方式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proc = lambda{ puts "lambda"}
</span><span class='line'>proc.call
</span><span class='line'>
</span><span class='line'>proc = -&gt; { puts "lambda too"}
</span><span class='line'>proc.call</span></code></pre></td></tr></table></div></figure>


<h2>lambda to block</h2>

<p>printer 是一個lambda ，因為在 pls.each 後只能放block，但可以透過 &amp; 來將block 轉成 proc</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pls = ["Ruby", "Python", "Java", "PHP", "Node"]
</span><span class='line'>pls.each do |pl|
</span><span class='line'> puts "I like #{pl} "
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>printer = lambda{|pl| puts "I like #{pl}, too " }
</span><span class='line'>pls.each(&printer)
</span></code></pre></td></tr></table></div></figure>


<p>另外有常見的二種寫法，結果是一樣的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> tweets.map { |tweet| tweet.user }
</span><span class='line'> tweets.map(&:user)</span></code></pre></td></tr></table></div></figure>


<h2>option block</h2>

<p>可以使用 block_given? 來判斷傳入的是不是block</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Timeline
</span><span class='line'>  attr_accessor :tweets
</span><span class='line'>
</span><span class='line'>  def print
</span><span class='line'>    if block_given?
</span><span class='line'>      tweets.each { |tweet| puts yield tweet }
</span><span class='line'>    else
</span><span class='line'>      puts tweets.join(", ")
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>timeline = Timeline.new
</span><span class='line'>timeline.tweets = ["Ruby", "Python", "Java", "PHP", "Node"]
</span><span class='line'>
</span><span class='line'>timeline.print
</span><span class='line'>timeline.print { |tweet|
</span><span class='line'> "tweet: #{tweet}"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>心得</h2>

<p>block 、 Proc 、lambda  都一直都很容易混亂的，所以這個部份我也常常都要回來重新查一下觀念及寫法</p>

<h2>參考資料</h2>

<ul>
<li>CodeSchool</li>
<li>[<a href="http://rubyer.me/blog/917/">http://rubyer.me/blog/917/</a>] (<a href="http://rubyer.me/blog/917/">http://rubyer.me/blog/917/</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sidekiq 初體驗]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/20/sidekiq/"/>
    <updated>2016-06-20T21:49:24+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/20/sidekiq</id>
    <content type="html"><![CDATA[<p>Simple, efficient background processing for Ruby.</p>

<p>之後會配合redis、rails 來做非同步的背景Job，今天先來一個sidekiq 的簡單ruby 程式練習</p>

<h2>安裝</h2>

<h4>Step1 : 建立一個目錄</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir MyJob</span></code></pre></td></tr></table></div></figure>


<h4>Step2 : 在MyJob目錄中建立一個Gemfile</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd MyJob</span></code></pre></td></tr></table></div></figure>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch Gemfile</span></code></pre></td></tr></table></div></figure>


<p>Gemfile 如下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>source "https://rubygems.org"
</span><span class='line'>
</span><span class='line'>gem 'sidekiq'</span></code></pre></td></tr></table></div></figure>


<p>之後記得 bundle install</p>

<h4>Step3 : 撰寫ruby程式</h4>

<p>myworker.rb</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require "sidekiq"
</span><span class='line'>
</span><span class='line'>Sidekiq.configure_client do |config|
</span><span class='line'>  config.redis = { db: 1 }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Sidekiq.configure_server do |config|
</span><span class='line'>  config.redis = { db: 1 }
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class MyWorker
</span><span class='line'>
</span><span class='line'>  include Sidekiq::Worker
</span><span class='line'>
</span><span class='line'>  def perform(name)
</span><span class='line'>    puts "Hello , #{name}"
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>Step4 : 測試</h4>

<p>執行sidekiq</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bundle exec sidekiq -r ./myworker.rb</span></code></pre></td></tr></table></div></figure>


<p>進入console 模式測試 worker</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>irb -r ./myworker.rb</span></code></pre></td></tr></table></div></figure>


<p>在irb中測試一下</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MyWorker.perform_async("Ruby")
</span><span class='line'>MyWorker.perform_in(5.minutes, "Ruby")
</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/sidekiq/sidekiq_test.png" alt="Alt text" /></p>

<p>打完收工，之後當然是要把sidekiq 串接到Rails中，之後會再介紹</p>

<h2>參考資料</h2>

<p><a href="https://www.youtube.com/watch?v=bfPb1zD91Rg&amp;list=PLjeHh2LSCFrWGT5uVjUuFKAcrcj5kSai1&amp;index=1">You Tube 介紹</a></p>

<p><a href="https://github.com/mperham/sidekiq/wiki">sidekiq wiki</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Roo Gem 來讀取 Excel 內容]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/19/roo-gem/"/>
    <updated>2016-06-19T22:24:45+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/19/roo-gem</id>
    <content type="html"><![CDATA[<h2>什麼是 roo</h2>

<p>用來方便讀取 xls, xlsx, csv 的檔案內容，最常用在匯入一些excel的資料
這邊會先介紹簡單的roo 使用，會在下一個剖份再來實作一個 web 上傳檔案可以匯入的功能</p>

<h2>如何使用</h2>

<pre><code class="`">  gem install roo
</code></pre>

<p> 另外如果有編碼的問題，請也一併用 iconv 來處理</p>

<h2>範例</h2>

<p>簡單的說明一下，假設我有一份 xlsx 的檔案，如下圖</p>

<p><img src="http://jimmy0328.github.io/images/roo/xlsx_file.png" alt="Alt text" /></p>

<p>接下來使用 roo 來簡單的讀取資料
這邊我寫一支簡單的ruby 來測試一下，所以當我執行 <code>Excel.import("../hotels.xlsx")</code> 就可以把我要的xlsx試著print出來</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'roo'
</span><span class='line'>require 'iconv'
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>class Hotel
</span><span class='line'>  def initialize(name, address, coordinates)
</span><span class='line'>    @name = name
</span><span class='line'>    @address = address
</span><span class='line'>    @coordinates = coordinates
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def print
</span><span class='line'>    "#{@name} | #{@address} | #{@coordinates}"
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>class Excel
</span><span class='line'>
</span><span class='line'>  def self.import(file_path)
</span><span class='line'>    xlsx = Roo::Spreadsheet.open(file_path)
</span><span class='line'>    xlsx.first_row.upto(xlsx.last_row) do |row|
</span><span class='line'>      name = xlsx.cell(row,'A')
</span><span class='line'>      address = xlsx.cell(row,'B')
</span><span class='line'>      coordinates = xlsx.cell(row,'C')
</span><span class='line'>      puts Hotel.new(name, address, coordinates).print
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Excel.import("../hotels.xlsx")
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>大功告成，下一篇再來實作一個檔案上傳可以import的功能</p>

<h2>參考資料</h2>

<p><a href="http://roo.rubyforge.org/">http://roo.rubyforge.org/</a>
[<a href="https://github.com/roo-rb/roo">https://github.com/roo-rb/roo</a>] (<a href="https://github.com/roo-rb/roo">https://github.com/roo-rb/roo</a>)
<a href="http://railscasts.com/episodes/396-importing-csv-and-excel?autoplay=true">Railscasts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[抓web網站小圖]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/18/scraper/"/>
    <updated>2016-06-18T21:53:45+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/18/scraper</id>
    <content type="html"><![CDATA[<h2>metainspector 做什麼</h2>

<p>就像Facebook一樣，輸入了URL 他會自動的顯示小圖及一些說明，如果自己實作可能要寫一些爬蟲去抓一些html的內容回來
metainspector 可以很簡單的實作這件事件</p>

<p><a href="https://github.com/jaimeiniesta/metainspector">Git source</a></p>

<h2>如何使用</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'metainspector'
</span></code></pre></td></tr></table></div></figure>


<p>在 Rails Console 中當然就可以測試了，我這邊預計來抓 <code>title, description 及小圖</code>
以 Airbnb 為例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>page = MetaInspector.new('http://www.airbnb.com')</span></code></pre></td></tr></table></div></figure>


<p>從回傳的page中拿到 title, description及小圖
這些api可以在官網找到</p>

<p><code>
page.title
page.description
page.images.best
</code></p>

<h2>如Rails中使用ajax 來簡單的實作一下吧</h2>

<p>加上javascript, 偷懶的話可以在erb的最下面加上這段也可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script&gt;
</span><span class='line'>  $("#web_url").on("change",function(){
</span><span class='line'>    $.ajax({
</span><span class='line'>      url: '/scraper',
</span><span class='line'>      method: "post",
</span><span class='line'>      data: {url: $(this).val()},
</span><span class='line'>      success: function(data){
</span><span class='line'>        console.warn(data);
</span><span class='line'>        if(data){
</span><span class='line'>          $("#web_title").val(data.title);
</span><span class='line'>          $("#web_description").val(data.description);
</span><span class='line'>          $("#web_image").val(data.image);
</span><span class='line'>          $("#web_image_preview").attr("src", data.image).attr("style","width:100px")
</span><span class='line'>        }
</span><span class='line'>      }
</span><span class='line'>    });
</span><span class='line'>  });
</span><span class='line'>
</span><span class='line'>&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>在controller中可以這麼寫</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def scraper
</span><span class='line'> begin
</span><span class='line'>   page = MetaInspector.new(params[:url])
</span><span class='line'>   render json: {title: page.title, description: page.description, image: page.images.best}
</span><span class='line'> rescue
</span><span class='line'> end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Routes設定</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Rails.application.routes.draw do
</span><span class='line'>  resources :webs
</span><span class='line'>  post "scraper" =&gt; "webs#scraper"
</span><span class='line'>  root "webs#index"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>畫面</h2>

<p>輸入完url之後，其它欄位會自動抓回來
<br/>
<img src="http://jimmy0328.github.io/images/scraper/before_view.png" height="100" width="300" alt="Alt text" />
<br/>
<img src="http://jimmy0328.github.io/images/scraper/after_view.png" height="100" width="300" alt="Alt text" /></p>

<p>打完收工囉</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Settingslogic Gem 的使用]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/18/settingslogic/"/>
    <updated>2016-06-18T10:00:55+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/18/settingslogic</id>
    <content type="html"><![CDATA[<h2>什麼是 Settingslogic</h2>

<p>Settingslogic is a simple configuration / settings solution that uses an ERB enabled YAML file. It has been great for our apps, maybe you will enjoy it too. Settingslogic works with Rails, Sinatra, or any Ruby project.</p>

<p><a href="https://github.com/binarylogic/settingslogic">Git source</a></p>

<h2>安裝</h2>

<p>Rails Gemfile中使用</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'settingslogic'</span></code></pre></td></tr></table></div></figure>


<p>記得 bundle install</p>

<h2>使用</h2>

<p>在Rails model中建立一支 models class, 例如 : Fee</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ass Fee &lt; Settingslogic
</span><span class='line'>
</span><span class='line'>  source "#{Rails.root}/config/fee.yml"
</span><span class='line'>  namespace Rails.env
</span><span class='line'>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<p>在 config 中 增新一支 fee.yml</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defaults: &default
</span><span class='line'>  salary:
</span><span class='line'>    sales: 0
</span><span class='line'>    staff: 0
</span><span class='line'>    staff_overtime: 0
</span></code></pre></td></tr></table></div></figure>


<p>大功告成</p>

<h2>測試</h2>

<p>在 Rails console 中就可以直接類似 Rails model 的方式操作它了</p>

<p>例如: <code>Fee.salary</code></p>

<p><img src="http://jimmy0328.github.io/images/settingslogic/settingslogic_test.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec 介紹]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/17/ruby-rspec/"/>
    <updated>2016-06-17T10:34:23+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/17/ruby-rspec</id>
    <content type="html"><![CDATA[<h2>什麼是Rspec</h2>

<p><a href="http://rspec.info">Rspec 官網</a></p>

<p>Behaviour Driven
Development for Ruby.
Making TDD Productive and Fun.</p>

<p>簡開單的說它就是一種測試工具，在系統開發過中，很多人會使用TDD的開方方法來做開發，所以撰寫測試就是一個其中一個很重要的部份了。</p>

<p>Rspec 是 Ruby 專用的測試，所以你可以在許多在Rails專案中導入使用來測試 Controller, Model, Request ..等
這邊要介紹的是單純的Ruby程式怎麼使用 Rspec 來測試</p>

<h2>安裝Rspec</h2>

<p>在你的開發目錄中，先安裝 Rspec</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install Rspec</span></code></pre></td></tr></table></div></figure>


<p>接著在目錄下初始化一下 Rspec</p>

<p>相關的Rspec套件也會一併安裝
<img src="http://jimmy0328.github.io/images/rspec/gem_install_rspec.png" alt="Alt text" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rspec --init</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/rspec_init.png" alt="Alt text" /></p>

<p>此時會自動產生一個spec 的目錄，在目前裡會有一支 spec_helper.rb</p>

<h2>How to use</h2>

<p>在以下的範例僅是我為了簡單解說，所以不是一個很正規的架構方法</p>

<ul>
<li>首先建立一個 ruby class, 我這邊是一支 tag.rb</li>
<li>建立一個 models 的目錄，之後有撰寫class的測試腳本都可以放在這邊</li>
<li>在 models 裡建立一支 tag_spec.rb</li>
</ul>


<p>大致上需要先手動建立一下這些目錄及程式</p>

<p><img src="http://jimmy0328.github.io/images/rspec/folder_tree.png" alt="Alt text" /></p>

<h4>ruby class</h4>

<p>這是一個很簡單的ruby class ,好像沒什麼功能，所以才說單純是為了練習
在class裡有一個方法 add 可以用來加1</p>

<p><code>tag.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Tag
</span><span class='line'>  attr_reader :count
</span><span class='line'>
</span><span class='line'>  def initialize
</span><span class='line'>    @count = 0
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def add
</span><span class='line'>   @count += 1
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>spec</h4>

<p>這邊不解說Rspec的寫法，下一篇會詳細說明</p>

<p><code>tag_spec.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'spec_helper'
</span><span class='line'>require 'tag'
</span><span class='line'>
</span><span class='line'>describe Tag do
</span><span class='line'>  it 'tag count for each roll' do
</span><span class='line'>    tag = Tag.new
</span><span class='line'>    10.times { tag.add }
</span><span class='line'>    expect(tag.count).to eq(10)
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>測試</h2>

<p>可以直接測單一程式或是整個目錄</p>

<p>單一程式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rspec /spec/models/tag_spec.rb</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/test_one_class.png" alt="Alt text" /></p>

<p>測試整個目錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rspec /spec/models</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/test_models.png" alt="Alt text" /></p>

<h2>心得</h2>

<p>有做測試會比較有品質保障
接下來還會有幾篇陸續介紹
今天打完收工</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 裡的class Method 與 Instance Method 使用方式]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/16/class-method-and-instance-method/"/>
    <updated>2016-06-16T10:14:25+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/16/class-method-and-instance-method</id>
    <content type="html"><![CDATA[<h2>Instance Method</h2>

<p>簡單的說就是要先建立一個實體才能使用裡面的方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class User
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    @name = name
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  # Instance method
</span><span class='line'>  def say_hello
</span><span class='line'>    "Hello, #{@name}"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>使用方式</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user = User.new("Ruby")
</span><span class='line'>user.say_hello # =&gt; Hello, ruby
</span></code></pre></td></tr></table></div></figure>


<h4>說明</h4>

<p>必須建立實體之後才能調用物件內的方式
所以我們是不能直接用 User.say_hello</p>

<h2>Class Method</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Group
</span><span class='line'>
</span><span class='line'>  def self.name
</span><span class='line'>    "Kaohsiung Rails Meetup"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  class &lt;&lt; self
</span><span class='line'>    def find(user_id)
</span><span class='line'>      "find group user with the id of #{user_id}"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>使用方式</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts Group.name # =&gt; Kaohsiung Rails Meetup
</span><span class='line'>puts Group.find(1) # =&gt; find group user with the is of 1
</span></code></pre></td></tr></table></div></figure>


<h4>說明</h4>

<p>我最常使用的會有這二種宣告方式</p>

<h2>Rails 中的 Class Method</h2>

<p>在 Rails 中使用 ActiveRecord modul 時，其實裡面有許多class method 的方式
最常見的就是 where, find, first&hellip;等</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> class Group &lt; ActiveRecord::Base
</span><span class='line'>
</span><span class='line'>   scope :active -&gt; { where state: 'active'}
</span><span class='line'>   scope :inactive -&gt; {where state: 'inactive'}
</span><span class='line'>
</span><span class='line'>   def permalink
</span><span class='line'>     xxxxxxxx
</span><span class='line'>   end
</span><span class='line'>
</span><span class='line'> end
</span></code></pre></td></tr></table></div></figure>


<p>除了ruby 上面的二種宣告class method 的方式，在Rails中還可以使用scope 的方式來達到效果
如果你有在寫Rails的話，scope 的使用方式就應該很熟了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 1. Group.active
</span><span class='line'> 2. Group.find
</span><span class='line'> 3. Group.first</span></code></pre></td></tr></table></div></figure>


<p>打完收工</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acts_as_taggable_on Gem 介紹]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/14/use-acts-as-taggable-on-gem/"/>
    <updated>2016-06-14T22:08:51+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/14/use-acts-as-taggable-on-gem</id>
    <content type="html"><![CDATA[<p>Rails中使用tag方便整合的gem</p>

<p><a href="https://github.com/mbleigh/acts-as-taggable-on">GitHub 官網</a></p>

<h2>安裝步驟</h2>

<p>Step1: Gemfile中加上</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'acts-as-taggable-on'</span></code></pre></td></tr></table></div></figure>


<p>回command line 執行 bundle install</p>

<p>Step2: 執行gem 的install</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake acts_as_taggable_on_engine:install:migrations</span></code></pre></td></tr></table></div></figure>


<p>Step3: migrate</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>P.S 如果你使用的資料庫是MySQL 可以另外參加 <a href="https://github.com/mbleigh/acts-as-taggable-on#for-mysql-users">https://github.com/mbleigh/acts-as-taggable-on#for-mysql-users</a></p>

<h2>如何使用</h2>

<p>在Model 中的宣告方式有二種</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class User &lt; ActiveRecord::Base
</span><span class='line'>  acts_as_taggable
</span><span class='line'>  acts_as_taggable_on :skill, :interest
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>所以在Controller 中的使用方式, 有依據以上二種設定方式有不同的參數值，分別如下</p>

<p>如果使用<code>acts_as_taggable</code> 後面不接任何參數，那default使用 tags_list</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class UsersController &lt; ApplicationController
</span><span class='line'>  def user_params
</span><span class='line'>    params.require(:user).permit(:name, :tag_list)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>如果使用 <code>acts_as_taggable_on :skills, :interests</code>, 那就有區分 skills_list 與 interests_list</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class UsersController &lt; ApplicationController
</span><span class='line'>  def user_params
</span><span class='line'>    params.require(:user).permit(:name, :skill_list, interest_list)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>大功告成</h2>

<p>以上是最簡單的設定方式，前端只要送對應的 tag_list 或是 skill_list 過來即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= form_for :user , method: :post, url: users_path do |f| %&gt;
</span><span class='line'>略
</span><span class='line'>&lt;%= f.text_field :skill_list%&gt;
</span><span class='line'>&lt;%= f.text_field :interest_list%&gt;
</span><span class='line'>略</span></code></pre></td></tr></table></div></figure>


<p>P.S 輸入的值預設是用逗號區隔開來，例如 interest_list 的值為<code>movie, game, swim</code></p>

<h2>提供了找出最多與最少使用的tag</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActsAsTaggableOn::Tag.most_used(10)
</span><span class='line'>ActsAsTaggableOn::Tag.least_used(10)</span></code></pre></td></tr></table></div></figure>


<p>預設不給值是抓前20筆</p>

<h2>其它用法介紹</h2>

<p>使用 add 及 remove 來新增及刪除tag</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@user.tag_list.add("awesome")   # add a single tag. alias for &lt;&lt;
</span><span class='line'>@user.tag_list.remove("awesome") # remove a single tag</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@user.tag_list.add("awesome", "slick")
</span><span class='line'>@user.tag_list.remove("awesome", "slick")</span></code></pre></td></tr></table></div></figure>


<p>也可以很暴力的直接給他值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@user.tag_list = "awesome, slick, hefty"
</span><span class='line'>@user.save
</span><span class='line'>@user.reload
</span><span class='line'>@user.tags
</span></code></pre></td></tr></table></div></figure>


<h2>心得</h2>

<p>此gem 提供很多不錯的helper，是很簡單就可以整合到專案上的GEM
如果有注意看migration的就會發現它全部都是在控制 tag 與 tagging 二個 table
最後如果想要更了解這個gem的使用可以參考 <a href="https://github.com/mbleigh/acts-as-taggable-on">GitHub 官網</a>
在RailsCase 也有另一個教學可以參考<a href="http://railscasts.com/episodes/382-tagging">RailsCasts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[認識 Reactjs]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/03/10/reactjs-1/"/>
    <updated>2016-03-10T18:29:05+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/03/10/reactjs-1</id>
    <content type="html"><![CDATA[<h2>何謂 reactjs</h2>

<p><a href="https://facebook.github.io/react/"><img src="https://facebook.github.io/react/img/logo_og.png" width="200" alt="Alt text" /></a></p>

<p>React 是Facebook 推出來的 JavaScript Library, 使用Virtual DOM 的方式處理，在效能部份也是比其它Library還要來的好的。
官方連結: <a href="https://facebook.github.io/react/">https://facebook.github.io/react/</a></p>

<h2>React 的幾個概念</h2>

<ul>
<li>Component</li>
<li>JSX</li>
<li>Virtual DOM</li>
<li>Data Flow</li>
</ul>


<h2>reactjs Lifecycle</h2>

<p><a href="https://facebook.github.io/react/docs/component-specs.html">https://facebook.github.io/react/docs/component-specs.html</a></p>

<h2>Hello ReactJS</h2>

<p>以下範例會使用到</p>

<ul>
<li>React.createClass</li>
<li>render</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;!DOCTYPE html&gt;
</span><span class='line'> &lt;html&gt;
</span><span class='line'>
</span><span class='line'> &lt;head&gt;
</span><span class='line'>     &lt;meta charset="utf-8" /&gt;
</span><span class='line'>     &lt;title&gt;Hello ReactJS&lt;/title&gt;
</span><span class='line'>     &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.js"&gt;&lt;/script&gt;
</span><span class='line'>     &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js"&gt;&lt;/script&gt;
</span><span class='line'>     &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"&gt;&lt;/script&gt;
</span><span class='line'> &lt;/head&gt;
</span><span class='line'>
</span><span class='line'> &lt;body&gt;
</span><span class='line'>     &lt;div id="example"&gt;&lt;/div&gt;
</span><span class='line'>     &lt;script type="text/babel"&gt;
</span><span class='line'>       var Hello = React.createClass({
</span><span class='line'>         render: function() {
</span><span class='line'>           return (
</span><span class='line'>                &lt;div &gt;
</span><span class='line'>                  Hello, ReactJS !
</span><span class='line'>               &lt;/div&gt;
</span><span class='line'>               );
</span><span class='line'>           } });
</span><span class='line'>           ReactDOM.render(&lt;Hello /&gt;, document.getElementById('example') );
</span><span class='line'>     &lt;/script&gt;
</span><span class='line'> &lt;/body&gt;
</span><span class='line'>
</span><span class='line'> &lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p>這是一個很簡單的的react範例</p>

<p>首先，必須載入 react,react-dom 及 browser</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"&gt;&lt;/script&gt;
</span></code></pre></td></tr></table></div></figure>


<p>指定一個 div id為example, react component 會將render 出來的DOM放在這個區塊裡</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="example"&gt;&lt;/div&gt;
</span></code></pre></td></tr></table></div></figure>


<p>這邊是一個 react component , 簡單的說明一下，使用 React.createClass 來建立 react component,</p>

<p>在此component 的呈現，必須在 render 的方法內來回傳,這邊回傳的是 <div> Hello, ReactJS ! </div></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> var Hello  = React.createClass({
</span><span class='line'>   render: function() {
</span><span class='line'>     return (
</span><span class='line'>          &lt;div &gt;
</span><span class='line'>            Hello, ReactJS !
</span><span class='line'>         &lt;/div&gt;
</span><span class='line'>      );
</span><span class='line'>   } });</span></code></pre></td></tr></table></div></figure>


<p>最後上面的 react compoent 指命為 Hello, 在Hello Component的內容會被 render 到 example 的 div 內</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ReactDOM.render(&lt;CommentBox /&gt;, document.getElementById('example') );</span></code></pre></td></tr></table></div></figure>


<p>注意，在script 的type 必須宣告為 text/babel</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/babel"&gt;
</span><span class='line'>// code
</span><span class='line'>
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>大功告成
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo 練習</h2>

<p>入門練習可以參考這以下</p>

<ul>
<li><a href="https://github.com/ruanyf/react-demos">https://github.com/ruanyf/react-demos</a></li>
<li><a href="http://blog.kdchang.cc/2015/10/reactjs-notes-intro.html">http://blog.kdchang.cc/2015/10/reactjs-notes-intro.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Octopress 安裝介紹]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/03/10/github-octopress-install/"/>
    <updated>2016-03-10T17:42:14+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/03/10/github-octopress-install</id>
    <content type="html"><![CDATA[<p>有許多網站都寫的很詳細了，這邊就做個簡單的整理就好
這邊假設你己經有裝好ruby 及 bundler 環境，如果沒有安裝可以參考下方的參考連結
步驗如下</p>

<h3>建立github repository</h3>

<p>必須先建立一個 repository, 在github 上可以有blog的方式，他的命名規則必須是 [username].github.io</p>

<p><a href="https://github.com/new">New Repository</a></p>

<p>[放圖片]</p>

<h3>下載Octopress 及 安裝</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'> cd octopress
</span><span class='line'> bundle install
</span><span class='line'> rake install</span></code></pre></td></tr></table></div></figure>


<h3>將 blog 與 repository 同步</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>這邊會問你的github的repository, 所以要輸入git@github.com:xxxxx/xxxx.github.io.git</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "init blog"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>大功告成，將blog 上傳到 github</p>

<h3>其它指令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake 'new_post["title"]'
</span><span class='line'>
</span><span class='line'>rake generate   # Generates posts and pages into the public directory
</span><span class='line'>
</span><span class='line'>rake watch      # Watches source/ and sass/ for changes and regenerates
</span><span class='line'>
</span><span class='line'>rake preview    # Watches, and mounts a webserver at http://localhost:4000</span></code></pre></td></tr></table></div></figure>


<h1>參考連結</h1>

<p><a href="http://zerodie.github.io/blog/2012/01/19/octopress-github-pages/">http://zerodie.github.io/blog/2012/01/19/octopress-github-pages/</a></p>

<p><a href="http://wen00072-blog.logdown.com/posts/258497-octopress-installed-and-deployed-on-the-github-pages">http://wen00072-blog.logdown.com/posts/258497-octopress-installed-and-deployed-on-the-github-pages</a></p>

<p><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<h1>其它問題</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zsr:1: no matches found: [rejected]
</span><span class='line'>r: failed to push some refs to 'git@github.com:jimmy0328/jimmy0328.github.io.git'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class='line'>hint: 'git pull ...') before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure>


<p>先切到_deploy的目錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin master -f</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.mohitkanwal.com/blog/2014/03/26/blogging-with-octopress-from-2-computers/">http://blog.mohitkanwal.com/blog/2014/03/26/blogging-with-octopress-from-2-computers/</a></p>
]]></content>
  </entry>
  
</feed>
