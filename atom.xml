<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[熊爸天下]]></title>
  <link href="http://jimmy0328.github.io/atom.xml" rel="self"/>
  <link href="http://jimmy0328.github.io/"/>
  <updated>2016-06-17T11:37:28+08:00</updated>
  <id>http://jimmy0328.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Lin]]></name>
    <email><![CDATA[jimmy0328@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rspec 介紹]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/17/ruby-rspec/"/>
    <updated>2016-06-17T10:34:23+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/17/ruby-rspec</id>
    <content type="html"><![CDATA[<h2>什麼是Rspec</h2>

<p><a href="http://rspec.info">Rspec 官網</a></p>

<p>Behaviour Driven
Development for Ruby.
Making TDD Productive and Fun.</p>

<p>簡開單的說它就是一種測試工具，在系統開發過中，很多人會使用TDD的開方方法來做開發，所以撰寫測試就是一個其中一個很重要的部份了。</p>

<p>Rspec 是 Ruby 專用的測試，所以你可以在許多在Rails專案中導入使用來測試 Controller, Model, Request ..等
這邊要介紹的是單純的Ruby程式怎麼使用 Rspec 來測試</p>

<h2>安裝Rspec</h2>

<p>在你的開發目錄中，先安裝 Rspec</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem install Rspec</span></code></pre></td></tr></table></div></figure>


<p>接著在目錄下初始化一下 Rspec</p>

<p>相關的Rspec套件也會一併安裝
<img src="http://jimmy0328.github.io/images/rspec/gem_install_rspec.png" alt="Alt text" /></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rspec --init</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/rspec_init.png" alt="Alt text" /></p>

<p>此時會自動產生一個spec 的目錄，在目前裡會有一支 spec_helper.rb</p>

<h2>How to use</h2>

<p>在以下的範例僅是我為了簡單解說，所以不是一個很正規的架構方法</p>

<ul>
<li>首先建立一個 ruby class, 我這邊是一支 tag.rb</li>
<li>建立一個 models 的目錄，之後有撰寫class的測試腳本都可以放在這邊</li>
<li>在 models 裡建立一支 tag_spec.rb</li>
</ul>


<p>大致上需要先手動建立一下這些目錄及程式</p>

<p><img src="http://jimmy0328.github.io/images/rspec/folder_tree.png" alt="Alt text" /></p>

<h4>ruby class</h4>

<p>這是一個很簡單的ruby class ,好像沒什麼功能，所以才說單純是為了練習
在class裡有一個方法 add 可以用來加1</p>

<p><code>tag.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Tag
</span><span class='line'>  attr_reader :count
</span><span class='line'>
</span><span class='line'>  def initialize
</span><span class='line'>    @count = 0
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  def add
</span><span class='line'>   @count += 1
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>spec</h4>

<p>這邊不解說Rspec的寫法，下一篇會詳細說明</p>

<p><code>tag_spec.rb</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require 'spec_helper'
</span><span class='line'>require 'tag'
</span><span class='line'>
</span><span class='line'>describe Tag do
</span><span class='line'>  it 'tag count for each roll' do
</span><span class='line'>    tag = Tag.new
</span><span class='line'>    10.times { tag.add }
</span><span class='line'>    expect(tag.count).to eq(10)
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h2>測試</h2>

<p>可以直接測單一程式或是整個目錄</p>

<p>單一程式</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rspec /spec/models/tag_spec.rb</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/test_one_class.png" alt="Alt text" /></p>

<p>測試整個目錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rspec /spec/models</span></code></pre></td></tr></table></div></figure>


<p><img src="http://jimmy0328.github.io/images/rspec/test_models.png" alt="Alt text" /></p>

<h2>心得</h2>

<p>有做測試會比較有品質保障
接下來還會有幾篇陸續介紹
今天打完收工</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 裡的class Method 與 Instance Method 使用方式]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/16/class-method-and-instance-method/"/>
    <updated>2016-06-16T10:14:25+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/16/class-method-and-instance-method</id>
    <content type="html"><![CDATA[<h2>Instance Method</h2>

<p>簡單的說就是要先建立一個實體才能使用裡面的方法</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class User
</span><span class='line'>
</span><span class='line'>  def initialize(name)
</span><span class='line'>    @name = name
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  # Instance method
</span><span class='line'>  def say_hello
</span><span class='line'>    "Hello, #{@name}"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>使用方式</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>user = User.new("Ruby")
</span><span class='line'>user.say_hello # =&gt; Hello, ruby
</span></code></pre></td></tr></table></div></figure>


<h4>說明</h4>

<p>必須建立實體之後才能調用物件內的方式
所以我們是不能直接用 User.say_hello</p>

<h2>Class Method</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Group
</span><span class='line'>
</span><span class='line'>  def self.name
</span><span class='line'>    "Kaohsiung Rails Meetup"
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  class &lt;&lt; self
</span><span class='line'>    def find(user_id)
</span><span class='line'>      "find group user with the id of #{user_id}"
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end
</span></code></pre></td></tr></table></div></figure>


<h4>使用方式</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>puts Group.name # =&gt; Kaohsiung Rails Meetup
</span><span class='line'>puts Group.find(1) # =&gt; find group user with the is of 1
</span></code></pre></td></tr></table></div></figure>


<h4>說明</h4>

<p>我最常使用的會有這二種宣告方式</p>

<h2>Rails 中的 Class Method</h2>

<p>在 Rails 中使用 ActiveRecord modul 時，其實裡面有許多class method 的方式
最常見的就是 where, find, first&hellip;等</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> class Group &lt; ActiveRecord::Base
</span><span class='line'>
</span><span class='line'>   scope :active -&gt; { where state: 'active'}
</span><span class='line'>   scope :inactive -&gt; {where state: 'inactive'}
</span><span class='line'>
</span><span class='line'>   def permalink
</span><span class='line'>     xxxxxxxx
</span><span class='line'>   end
</span><span class='line'>
</span><span class='line'> end
</span></code></pre></td></tr></table></div></figure>


<p>除了ruby 上面的二種宣告class method 的方式，在Rails中還可以使用scope 的方式來達到效果
如果你有在寫Rails的話，scope 的使用方式就應該很熟了</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> 1. Group.active
</span><span class='line'> 2. Group.find
</span><span class='line'> 3. Group.first</span></code></pre></td></tr></table></div></figure>


<p>打完收工</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Acts_as_taggable_on Gem 介紹]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/14/use-acts-as-taggable-on-gem/"/>
    <updated>2016-06-14T22:08:51+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/14/use-acts-as-taggable-on-gem</id>
    <content type="html"><![CDATA[<p>Rails中使用tag方便整合的gem</p>

<p><a href="https://github.com/mbleigh/acts-as-taggable-on">GitHub 官網</a></p>

<h2>安裝步驟</h2>

<p>Step1: Gemfile中加上</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'acts-as-taggable-on'</span></code></pre></td></tr></table></div></figure>


<p>回command line 執行 bundle install</p>

<p>Step2: 執行gem 的install</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake acts_as_taggable_on_engine:install:migrations</span></code></pre></td></tr></table></div></figure>


<p>Step3: migrate</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake db:migrate</span></code></pre></td></tr></table></div></figure>


<p>P.S 如果你使用的資料庫是MySQL 可以另外參加 <a href="https://github.com/mbleigh/acts-as-taggable-on#for-mysql-users">https://github.com/mbleigh/acts-as-taggable-on#for-mysql-users</a></p>

<h2>如何使用</h2>

<p>在Model 中的宣告方式有二種</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class User &lt; ActiveRecord::Base
</span><span class='line'>  acts_as_taggable
</span><span class='line'>  acts_as_taggable_on :skill, :interest
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>所以在Controller 中的使用方式, 有依據以上二種設定方式有不同的參數值，分別如下</p>

<p>如果使用<code>acts_as_taggable</code> 後面不接任何參數，那default使用 tags_list</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class UsersController &lt; ApplicationController
</span><span class='line'>  def user_params
</span><span class='line'>    params.require(:user).permit(:name, :tag_list)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>如果使用 <code>acts_as_taggable_on :skills, :interests</code>, 那就有區分 skills_list 與 interests_list</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class UsersController &lt; ApplicationController
</span><span class='line'>  def user_params
</span><span class='line'>    params.require(:user).permit(:name, :skill_list, interest_list)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h2>大功告成</h2>

<p>以上是最簡單的設定方式，前端只要送對應的 tag_list 或是 skill_list 過來即可</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;%= form_for :user , method: :post, url: users_path do |f| %&gt;
</span><span class='line'>略
</span><span class='line'>&lt;%= f.text_field :skill_list%&gt;
</span><span class='line'>&lt;%= f.text_field :interest_list%&gt;
</span><span class='line'>略</span></code></pre></td></tr></table></div></figure>


<p>P.S 輸入的值預設是用逗號區隔開來，例如 interest_list 的值為<code>movie, game, swim</code></p>

<h2>提供了找出最多與最少使用的tag</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ActsAsTaggableOn::Tag.most_used(10)
</span><span class='line'>ActsAsTaggableOn::Tag.least_used(10)</span></code></pre></td></tr></table></div></figure>


<p>預設不給值是抓前20筆</p>

<h2>其它用法介紹</h2>

<p>使用 add 及 remove 來新增及刪除tag</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@user.tag_list.add("awesome")   # add a single tag. alias for &lt;&lt;
</span><span class='line'>@user.tag_list.remove("awesome") # remove a single tag</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@user.tag_list.add("awesome", "slick")
</span><span class='line'>@user.tag_list.remove("awesome", "slick")</span></code></pre></td></tr></table></div></figure>


<p>也可以很暴力的直接給他值</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@user.tag_list = "awesome, slick, hefty"
</span><span class='line'>@user.save
</span><span class='line'>@user.reload
</span><span class='line'>@user.tags
</span></code></pre></td></tr></table></div></figure>


<h2>心得</h2>

<p>此gem 提供很多不錯的helper，是很簡單就可以整合到專案上的GEM
如果有注意看migration的就會發現它全部都是在控制 tag 與 tagging 二個 table
最後如果想要更了解這個gem的使用可以參考 <a href="https://github.com/mbleigh/acts-as-taggable-on">GitHub 官網</a>
在RailsCase 也有另一個教學可以參考<a href="http://railscasts.com/episodes/382-tagging">RailsCasts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[認識 Reactjs]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/03/10/reactjs-1/"/>
    <updated>2016-03-10T18:29:05+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/03/10/reactjs-1</id>
    <content type="html"><![CDATA[<h2>何謂 reactjs</h2>

<p><a href="https://facebook.github.io/react/"><img src="https://facebook.github.io/react/img/logo_og.png" width="200" alt="Alt text" /></a></p>

<p>React 是Facebook 推出來的 JavaScript Library, 使用Virtual DOM 的方式處理，在效能部份也是比其它Library還要來的好的。
官方連結: <a href="https://facebook.github.io/react/">https://facebook.github.io/react/</a></p>

<h2>React 的幾個概念</h2>

<ul>
<li>Component</li>
<li>JSX</li>
<li>Virtual DOM</li>
<li>Data Flow</li>
</ul>


<h2>reactjs Lifecycle</h2>

<p><a href="https://facebook.github.io/react/docs/component-specs.html">https://facebook.github.io/react/docs/component-specs.html</a></p>

<h2>Hello ReactJS</h2>

<p>以下範例會使用到</p>

<ul>
<li>React.createClass</li>
<li>render</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> &lt;!DOCTYPE html&gt;
</span><span class='line'> &lt;html&gt;
</span><span class='line'>
</span><span class='line'> &lt;head&gt;
</span><span class='line'>     &lt;meta charset="utf-8" /&gt;
</span><span class='line'>     &lt;title&gt;Hello ReactJS&lt;/title&gt;
</span><span class='line'>     &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.js"&gt;&lt;/script&gt;
</span><span class='line'>     &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js"&gt;&lt;/script&gt;
</span><span class='line'>     &lt;script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"&gt;&lt;/script&gt;
</span><span class='line'> &lt;/head&gt;
</span><span class='line'>
</span><span class='line'> &lt;body&gt;
</span><span class='line'>     &lt;div id="example"&gt;&lt;/div&gt;
</span><span class='line'>     &lt;script type="text/babel"&gt;
</span><span class='line'>       var Hello = React.createClass({
</span><span class='line'>         render: function() {
</span><span class='line'>           return (
</span><span class='line'>                &lt;div &gt;
</span><span class='line'>                  Hello, ReactJS !
</span><span class='line'>               &lt;/div&gt;
</span><span class='line'>               );
</span><span class='line'>           } });
</span><span class='line'>           ReactDOM.render(&lt;Hello /&gt;, document.getElementById('example') );
</span><span class='line'>     &lt;/script&gt;
</span><span class='line'> &lt;/body&gt;
</span><span class='line'>
</span><span class='line'> &lt;/html&gt;
</span></code></pre></td></tr></table></div></figure>


<p>這是一個很簡單的的react範例</p>

<p>首先，必須載入 react,react-dom 及 browser</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/react/0.14.7/react-dom.js"&gt;&lt;/script&gt;
</span><span class='line'>&lt;script src="https://cdnjs.cloudflare.com/ajax/libs/babel-core/5.8.23/browser.min.js"&gt;&lt;/script&gt;
</span></code></pre></td></tr></table></div></figure>


<p>指定一個 div id為example, react component 會將render 出來的DOM放在這個區塊裡</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div id="example"&gt;&lt;/div&gt;
</span></code></pre></td></tr></table></div></figure>


<p>這邊是一個 react component , 簡單的說明一下，使用 React.createClass 來建立 react component,</p>

<p>在此component 的呈現，必須在 render 的方法內來回傳,這邊回傳的是 <div> Hello, ReactJS ! </div></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> var Hello  = React.createClass({
</span><span class='line'>   render: function() {
</span><span class='line'>     return (
</span><span class='line'>          &lt;div &gt;
</span><span class='line'>            Hello, ReactJS !
</span><span class='line'>         &lt;/div&gt;
</span><span class='line'>      );
</span><span class='line'>   } });</span></code></pre></td></tr></table></div></figure>


<p>最後上面的 react compoent 指命為 Hello, 在Hello Component的內容會被 render 到 example 的 div 內</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ReactDOM.render(&lt;CommentBox /&gt;, document.getElementById('example') );</span></code></pre></td></tr></table></div></figure>


<p>注意，在script 的type 必須宣告為 text/babel</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script type="text/babel"&gt;
</span><span class='line'>// code
</span><span class='line'>
</span><span class='line'>&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>大功告成
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h2>Demo 練習</h2>

<p>入門練習可以參考這以下</p>

<ul>
<li><a href="https://github.com/ruanyf/react-demos">https://github.com/ruanyf/react-demos</a></li>
<li><a href="http://blog.kdchang.cc/2015/10/reactjs-notes-intro.html">http://blog.kdchang.cc/2015/10/reactjs-notes-intro.html</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Github Octopress 安裝介紹]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/03/10/github-octopress-install/"/>
    <updated>2016-03-10T17:42:14+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/03/10/github-octopress-install</id>
    <content type="html"><![CDATA[<p>有許多網站都寫的很詳細了，這邊就做個簡單的整理就好
這邊假設你己經有裝好ruby 及 bundler 環境，如果沒有安裝可以參考下方的參考連結
步驗如下</p>

<h3>建立github repository</h3>

<p>必須先建立一個 repository, 在github 上可以有blog的方式，他的命名規則必須是 [username].github.io</p>

<p><a href="https://github.com/new">New Repository</a></p>

<p>[放圖片]</p>

<h3>下載Octopress 及 安裝</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'> cd octopress
</span><span class='line'> bundle install
</span><span class='line'> rake install</span></code></pre></td></tr></table></div></figure>


<h3>將 blog 與 repository 同步</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>這邊會問你的github的repository, 所以要輸入git@github.com:xxxxx/xxxx.github.io.git</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake generate
</span><span class='line'>rake deploy</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m "init blog"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>大功告成，將blog 上傳到 github</p>

<h3>其它指令</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake 'new_post["title"]'
</span><span class='line'>
</span><span class='line'>rake generate   # Generates posts and pages into the public directory
</span><span class='line'>
</span><span class='line'>rake watch      # Watches source/ and sass/ for changes and regenerates
</span><span class='line'>
</span><span class='line'>rake preview    # Watches, and mounts a webserver at http://localhost:4000</span></code></pre></td></tr></table></div></figure>


<h1>參考連結</h1>

<p><a href="http://zerodie.github.io/blog/2012/01/19/octopress-github-pages/">http://zerodie.github.io/blog/2012/01/19/octopress-github-pages/</a></p>

<p><a href="http://wen00072-blog.logdown.com/posts/258497-octopress-installed-and-deployed-on-the-github-pages">http://wen00072-blog.logdown.com/posts/258497-octopress-installed-and-deployed-on-the-github-pages</a></p>

<p><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a></p>

<h1>其它問題</h1>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>zsr:1: no matches found: [rejected]
</span><span class='line'>r: failed to push some refs to 'git@github.com:jimmy0328/jimmy0328.github.io.git'
</span><span class='line'>hint: Updates were rejected because the tip of your current branch is behind
</span><span class='line'>hint: its remote counterpart. Integrate the remote changes (e.g.
</span><span class='line'>hint: 'git pull ...') before pushing again.
</span><span class='line'>hint: See the 'Note about fast-forwards' in 'git push --help' for details.</span></code></pre></td></tr></table></div></figure>


<p>先切到_deploy的目錄</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin master -f</span></code></pre></td></tr></table></div></figure>


<p><a href="http://blog.mohitkanwal.com/blog/2014/03/26/blogging-with-octopress-from-2-computers/">http://blog.mohitkanwal.com/blog/2014/03/26/blogging-with-octopress-from-2-computers/</a></p>
]]></content>
  </entry>
  
</feed>
