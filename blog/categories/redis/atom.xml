<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Redis | 熊爸天下]]></title>
  <link href="http://jimmy0328.github.io/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://jimmy0328.github.io/"/>
  <updated>2016-07-07T23:47:28+08:00</updated>
  <id>http://jimmy0328.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Lin]]></name>
    <email><![CDATA[jimmy0328@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 ActionCable 做聊天室]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/07/03/actioncable-demo/"/>
    <updated>2016-07-03T12:11:35+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/07/03/actioncable-demo</id>
    <content type="html"><![CDATA[<h2>ActionCable Tutorial</h2>

<p>實作一個簡易的聊天室</p>

<h4>1. 建立 Rails Project</h4>

<pre><code>rails new livechat
</code></pre>

<h4>2. 建立room controller</h4>

<pre><code>rails g controller rooms show
</code></pre>

<p>內容如下</p>

<pre><code>class RoomsController &lt; ApplicationController
  def show
    @messages = Message.all
  end
end
</code></pre>

<h4>3.建立Message model</h4>

<pre><code>rails g message context:text
</code></pre>

<p>rails db:migrate</p>

<h4>4. 修改View</h4>

<p>rooms/show.html.erb</p>

<p><img src="/images/actioncable/chat_view.png" width="400" alt="Alt text" /></p>

<p> 建立 messages/_message.html.erb</p>

<p><img src="/images/actioncable/chat_message.png" width="400" alt="Alt text" /></p>

<h4>5. 建立ActionCable</h4>

<pre><code>rails g channel room speak
</code></pre>

<p>會產生</p>

<p>app/channels/room_channel.rb</p>

<p>app/assets/javascripts/channels/room.coffee</p>

<h5>6. routes 設定</h5>

<p>設定可以接受 cable 的 route</p>

<pre><code>Rails.application.routes.draw do
  root to: 'rooms#show'
  mount ActionCable.server =&gt; '/cable'
end
</code></pre>

<h4>7. 修改 assets/javascripts/channels/room.coffee</h4>

<p>@perform &lsquo;speak&rsquo; 是指 speak chennel 要傳送的內容
註冊好 App.room 的 speak 與 received 之後，就在輸入框設定keypress 事情的listener</p>

<pre><code>App.room = App.cable.subscriptions.create "RoomChannel",
  connected: -&gt;
    # Called when the subscription is ready for use on the server

  disconnected: -&gt;
    # Called when the subscription has been terminated by the server

  received: (data) -&gt;
    $("#messages").append data['message']

  speak: (message) -&gt;
    @perform 'speak', message: message

$(document).on "keypress", "[data-behavior~=room_speaker]", (event) -&gt;
  if event.keyCode is 13
    App.room.speak event.target.value
    event.target.value = ''
    event.preventDefault()
</code></pre>

<h4>8. 建立Message Model</h4>

<pre><code>rails g model message
</code></pre>

<p>bundle install</p>

<p>修改內容如下
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Message &lt; ApplicationRecord
</span><span class='line'>  after_create_commit { MessageBroadcastJob.perform_later self}
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>#### 9. 修改 Server side 的Room Channel
</span><span class='line'>
</span><span class='line'>修改 app/channels/room_channel.rb
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;class RoomChannel &lt; ApplicationCable::Channel
</span><span class='line'>  def subscribed
</span><span class='line'>    stream_from &ldquo;room_channel&rdquo;
</span><span class='line'>  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  def unsubscribed
</span><span class='line'>    # Any cleanup needed when channel is unsubscribed
</span><span class='line'>  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  def speak(data)
</span><span class='line'>    Message.create context: data[&lsquo;message&rsquo;]
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure></p>

<h4>10. 使用ActiveJob 推送訊息</h4>

<p>Rails5 新增的 ApplicationControoler.renderer.render 功能
之後再來聊
總之這邊是broadcast messages/message 內容出去</p>

<pre><code>class MessageBroadcastJob &lt; ApplicationJob
  queue_as :default

  def perform(message)
    ActionCable.server.broadcast 'room_channel', message: render_message(message)
  end

  private

  def render_message(message)
    ApplicationController.renderer.render(partial: 'messages/message', locals: {message: message})
  end
end
</code></pre>

<h4>11. 修改 application.rb</h4>

<p>設定active_job 使用 sidekiq</p>

<pre><code>class Application &lt; Rails::Application
  # Settings in config/environments/* take precedence over those specified here.
  # Application configuration should go into files in config/initializers
  # -- all .rb files in that directory are automatically loaded.
 config.active_job.queue_adapter = :sidekiq
end
</code></pre>

<h4>12. 修改 environment/development.rb 及 production.rb</h4>

<pre><code>config.action_cable.disable_request_forgery_protection = true
</code></pre>

<h4>13. 修改 cable.yml</h4>

<p>在active job 我們是透過 redis 來處理server side 自己的 pub/sub</p>

<pre><code>development:
  adapter: redis
  url: redis://localhost:6379/2

test:
  adapter: async

production:
  adapter: redis
  url: redis://localhost:6379/1
</code></pre>

<h4>14. add sidekiq gem</h4>

<p>Gemfile add sidekiq
<code>
gem 'sidekiq'
</code></p>

<h4>15. 完成</h4>

<p>大功告成，但一開始我沒有提到要先裝 redis 及 sidekiq
這邊完全是照著 <a href="https://blog.codeship.com/how-to-use-rails-active-job/">https://blog.codeship.com/how-to-use-rails-active-job/</a> DHH教學文來做的，但我也不知道為什麼他沒有設定redis也可以work, 總之因為要跑 active job 來推播，所以這個部份我有加了一些設定，否則其它全部都是一樣的</p>

<h2>參考資料來源</h2>

<p><a href="https://www.youtube.com/watch?v=n0WUjGkDFS0">https://www.youtube.com/watch?v=n0WUjGkDFS0</a>
<a href="http://edgeguides.rubyonrails.org/active_job_basics.html">http://edgeguides.rubyonrails.org/active_job_basics.html</a>
<a href="https://blog.codeship.com/how-to-use-rails-active-job/">https://blog.codeship.com/how-to-use-rails-active-job/</a></p>
]]></content>
  </entry>
  
</feed>
