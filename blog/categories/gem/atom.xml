<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | 熊爸天下]]></title>
  <link href="http://jimmy0328.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://jimmy0328.github.io/"/>
  <updated>2016-06-27T00:11:10+08:00</updated>
  <id>http://jimmy0328.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Lin]]></name>
    <email><![CDATA[jimmy0328@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Rspec 搭配 Shoulda-matchers 測試 Model 及 Controller]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/25/rspec-test-model-controller/"/>
    <updated>2016-06-25T20:09:23+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/25/rspec-test-model-controller</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<p>在上一章有介紹怎麼安裝, 在這章會介紹幾個重要的觀念及用法</p>

<ol>
<li>describe 及 context</li>
</ol>


<p>這二個都是用來做分類使用的，例如</p>

<pre><code>describe Post do

  context "when post is valid" do
   ...
  end

  context "when post is invalid" do
   ...
  end
end
</code></pre>

<ol>
<li>使用 it 與 expect</li>
</ol>


<p>可以用這二個來做小片斷的測試</p>

<pre><code>describe Post do

  context "when post is valid" do

    it "should post if user is broker" do
     ....
     post = Post.create(title: 'test', context: 'test description')
     略
     expect(post.title).to eq("test")
    end

    it "should post if user is operator" do
     ...
    end

  end

  context "when post is invalid" do
   ...
  end
end
</code></pre>

<h2>安裝 shoulda-matcher</h2>

<ol>
<li><p>修改 Gemfile
<code>
gem 'rails-rspec'
gem 'shoulda-matchers', require: "shoulda/matchers"
</code></p></li>
<li><p>bundle install</p></li>
</ol>


<pre><code>bundle install
</code></pre>

<p><a href="https://github.com/thoughtbot/shoulda-matchers">https://github.com/thoughtbot/shoulda-matchers</a></p>

<ol>
<li>rails_helper.rb 加入設定</li>
</ol>


<p>在最下面加入
<code>
(略)
Shoulda::Matchers.configure do |config|
  config.integrate do |with|
    with.test_framework :rspec
    with.library :active_record
    with.library :active_model
    with.library :action_controller
    with.library :rails
  end
end
</code>
使用 shoulda-matchers 來簡化測試</p>

<h2>測試 model</h2>

<p>首先修改一下model, shoulda-matcher 提供了方便的helper，常見的如下</p>

<ul>
<li>ActionModel matchers</li>
<li>ActionRecord matchers</li>
<li>ActionController matchers</li>
</ul>


<p>測試model 當然是用 ActionModel matchers 的helper 來使用，例如: 必填欄位就可以使用 <code>validate_presence_of</code></p>

<p>spec/models/post_spec.rb</p>

<pre><code>require 'rails_helper'

RSpec.describe Post, type: :model do

  it { should validate_presence_of(:title) }
  it { should validate_presence_of(:context) }
  it { should belong_to(:user) }

  it "valid attributes" do
    expect(Post.new).not_to be_valid
  end

  it "valid attributes" do
    post = Post.create!(title: 'test', context: 'test')
    expect(post).to be_valid
  end

end
</code></pre>

<h2>測試 controller</h2>

<p>controller 可以寫到很細，這邊先用 index 及 create 做個簡單的sample</p>

<pre><code>require 'rails_helper'

RSpec.describe PostsController, type: :controller do

  describe "GET #index" do

    it "renders the index template" do
      get :index
      expect(response).to render_template("index")
    end

    it "responds successfully with an HTTP 200 status code" do
      get :index
      expect(response).to be_success
      expect(response).to have_http_status(200)
    end

  end

  describe "POST #create" do

    it "can create" do
      expect{
       post :create, post: {title: 'test', context: 'test'} ,format: :json
      }.to change{
        Post.count
      }.by(1)
    end
  end

end
</code></pre>

<p>除了RSpec + shoulda_matcher 外，在測試上我們也會搭配factory_girl 及 faker 來做一些 fake data 的處理，之後有空來再補這個部份的介紹</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec in Rails 安裝篇]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/25/rspec-in-rails-install/"/>
    <updated>2016-06-25T17:08:12+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/25/rspec-in-rails-install</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<h2>安裝</h2>

<h4>Gemfile 加入 rspec-rails</h4>

<pre><code>group :development do
(略)
gem 'rspec-rails', '~&gt; 3.4'
(略)
end
</code></pre>

<h4>bundle install</h4>

<pre><code>bundle install
</code></pre>

<h4>install rspec</h4>

<pre><code>rails generate rspec:install
</code></pre>

<p><img src="/images/rspec/install_rspec.png" width="400" alt="Alt text" /></p>

<h4>add model rspec</h4>

<p>app/models/post.rb</p>

<p>post model add validates</p>

<pre><code>validates :title, :context, presence: true
</code></pre>

<p>spec/models/post_spec.rb
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>require &lsquo;rails_helper&rsquo;&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;RSpec.describe Post, type: :model do&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  it &ldquo;valid attributes&rdquo; do
</span><span class='line'>    expect(Post.new).not_to be_valid
</span><span class='line'>  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  it &ldquo;valid attributes&rdquo; do
</span><span class='line'>    post = Post.create!(title: &lsquo;test&rsquo;, context: &lsquo;test&rsquo;)
</span><span class='line'>    expect(post).to be_valid
</span><span class='line'>  end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;end</span></code></pre></td></tr></table></div></figure></p>

<h4>測試</h4>

<pre><code>spec spec/models/post_spec.rb
</code></pre>

<p><img src="/images/rspec/test_pass.png" width="400" alt="Alt text" /></p>

<h4>參考資料</h4>

<p><a href="https://github.com/rspec/rspec-rails#model-specs">https://github.com/rspec/rspec-rails#model-specs</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 多國語系－資料庫]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/24/rails-global/"/>
    <updated>2016-06-24T23:46:43+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/24/rails-global</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<p>在上一篇 <a href="http://jimmy0328.github.io/blog/2016/06/23/rails-i18n/">Rails 多國語系-rails_i18n</a> 是使用 rails-i18n 來達到多國語系，設定的方式大多都是使用yml 的設定檔來建立不同的語系，所以一旦你的平台是內容的多國語系，這個時侯就變成要時常在修改locale的yml檔，相當沒有彈性。</p>

<p>使用 globalize 可以把多國語系建立在資料庫中，所以可以直修改data就可以維護多國語系了</p>

<h2>安裝</h2>

<h4>1. gem install globalize</h4>

<p>globalize 這個gem 似乎問題不小，在rails 4.2.3 跑 官方的 master branch 是有問題的
加上 Rails5 又有些不一樣了，改天再來在Rails5測試看看，總之以下方式是在 Rails5 是無法執行的</p>

<pre><code>gem 'rails-i18n'
gem 'globalize', git: "git@github.com:globalize/globalize.git"
</code></pre>

<h4>2. bundle install</h4>

<pre><code>bundle install
</code></pre>

<h4>3. 建立 translations</h4>

<pre><code>rails g migration create_post_translation
</code></pre>

<h4>4. 修改 migration 檔案</h4>

<pre><code>class CreatePostTranslations &lt; ActiveRecord::Migration
  def self.up
    Post.create_translation_table!({
      :title =&gt; :string,
      :context =&gt; :text
    }, {
      :migrate_data =&gt; true
    })
  end

  def self.down
    Post.drop_translation_table! :migrate_data =&gt; true
  end
end
</code></pre>

<h4>5. 修改 model</h4>

<pre><code>class Post &lt; ActiveRecord::Base
  translates :title, :context
end
</code></pre>

<h4>6. 修改config/application.rb</h4>

<p>加入
<code>
略
config.i18n.fallbacks = true
略
</code></p>

<h4>7. rake db:migrate</h4>

<pre><code>rake db:migrate
</code></pre>

<p>如果到這邊是順利的，那應該就表示成功了，否則應該就是版本上有些問題，可能又要再google 一下了</p>

<h2>測試</h2>

<ol>
<li><p>rails console</p></li>
<li><p>測試建立資料</p></li>
</ol>


<pre><code>I18n.locale = :en

Post.create({ title: "test1", context: "test1"})

I18n.locale = :"zh-TW"

post = Post.last
post.title = "測試"
post.save
</code></pre>

<p>大功告成，此時在 locale = :en 的 title 是 <code>test1</code>, 而 locale = :&ldquo;zh-TW&rdquo; 的 title 是 <code>測試</code></p>

<h2>參考資料</h2>

<ul>
<li><p><a href="https://github.com/ncri/globalize">https://github.com/ncri/globalize</a></p></li>
<li><p><a href="http://railscasts.com/episodes/338-globalize3?autoplay=true">http://railscasts.com/episodes/338-globalize3?autoplay=true</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 多國語系- Rails_i18n]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/23/rails-i18n/"/>
    <updated>2016-06-23T23:49:43+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/23/rails-i18n</id>
    <content type="html"><![CDATA[<h2>說明</h2>

<p>在Rails中要實現多國語系是一件很簡單的事，只要安裝 rails-i18n 就可以很輕鬆的實現了</p>

<h2>安裝</h2>

<h5>安裝 rails-i18n</h5>

<pre><code>gem 'rails-i18n'
</code></pre>

<p>記得 bundle install</p>

<h4>在application.rb 中宣告</h4>

<pre><code>略
config.i18n.load_path += Dir[Rails.root.join('config', 'locales', '**', '*.{rb,yml}').to_s]
config.i18n.default_locale = :"zh-TW"
config.i18n.available_locales = [:en, :"zh-TW"]
略
</code></pre>

<p>在application_controller.rb 中加入 locale 的判斷
我們希望在url後面帶上locale來改變語系，例如: locale=en
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>略&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;before_action :set_locale&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;def set_locale
</span><span class='line'>  if params[:locale] &amp;&amp; I18n.available_locales.include?( params[:locale].to_sym )
</span><span class='line'>     session[:locale] = params[:locale]
</span><span class='line'>  end
</span><span class='line'>   I18n.locale = session[:locale] || I18n.default_locale
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;略</span></code></pre></td></tr></table></div></figure></p>

<h2>設定多國語系的內容</h2>

<p>以中文與英文二個語系為例
在locales中加入</p>

<p><img src="/images/i18n/locale_folder.png" alt="Alt text" /></p>

<p>locales/post/en.yml
<code>
en:
  post:
    title: "Title"
    context: "Context"
</code></p>

<p>locales/post/zh-TW.yml
<code>
zh-TW:
  post:
    title: "標題"
    context: "內容"
</code></p>

<h2>使用方式</h2>

<p>在 erb 中使用 t(&ldquo;yml的設定方式&rdquo;)
```
略
  <thead>
    <tr>
      <th>&lt;%= t(&ldquo;post.title&rdquo;) %></th>
      <th>&lt;%= t(&ldquo;post.context&rdquo;) %></th>
      <th colspan="3"></th>
    </tr>
  </thead>
略</p>

<p>```</p>

<h2>測試</h2>

<p><a href="http://localhost:3000?locale=en">http://localhost:3000?locale=en</a></p>

<p><img src="/images/i18n/locale_test_en.png" alt="Alt text" /></p>

<p><a href="http://localhost:3000?locale=zh-TW">http://localhost:3000?locale=zh-TW</a></p>

<p><img src="/images/i18n/locale_test_zh.png" alt="Alt text" /></p>

<h2>參考資料</h2>

<p><a href="http://guides.rubyonrails.org/i18n.html">http://guides.rubyonrails.org/i18n.html</a>
<a href="http://juanitofatas.com/2014/06/25/rails-i18n-intro/">http://juanitofatas.com/2014/06/25/rails-i18n-intro/</a>
<a href="https://github.com/svenfuchs/rails-i18n">https://github.com/svenfuchs/rails-i18n</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用 Roo Gem 來讀取 Excel 內容]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/19/roo-gem/"/>
    <updated>2016-06-19T22:24:45+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/19/roo-gem</id>
    <content type="html"><![CDATA[<h2>什麼是 roo</h2>

<p>用來方便讀取 xls, xlsx, csv 的檔案內容，最常用在匯入一些excel的資料
這邊會先介紹簡單的roo 使用，會在下一個剖份再來實作一個 web 上傳檔案可以匯入的功能</p>

<h2>如何使用</h2>

<pre><code class="`">  gem install roo
</code></pre>

<p> 另外如果有編碼的問題，請也一併用 iconv 來處理</p>

<h2>範例</h2>

<p>簡單的說明一下，假設我有一份 xlsx 的檔案，如下圖</p>

<p><img src="/images/roo/xlsx_file.png" alt="Alt text" /></p>

<p>接下來使用 roo 來簡單的讀取資料
這邊我寫一支簡單的ruby 來測試一下，所以當我執行 <code>Excel.import("../hotels.xlsx")</code> 就可以把我要的xlsx試著print出來</p>

<pre><code>require 'roo'
require 'iconv'


class Hotel
  def initialize(name, address, coordinates)
    @name = name
    @address = address
    @coordinates = coordinates
  end

  def print
    "#{@name} | #{@address} | #{@coordinates}"
  end
end

class Excel

  def self.import(file_path)
    xlsx = Roo::Spreadsheet.open(file_path)
    xlsx.first_row.upto(xlsx.last_row) do |row|
      name = xlsx.cell(row,'A')
      address = xlsx.cell(row,'B')
      coordinates = xlsx.cell(row,'C')
      puts Hotel.new(name, address, coordinates).print
    end
  end

end

Excel.import("../hotels.xlsx")
</code></pre>

<p>大功告成，下一篇再來實作一個檔案上傳可以import的功能</p>

<h2>參考資料</h2>

<p><a href="http://roo.rubyforge.org/">http://roo.rubyforge.org/</a>
[<a href="https://github.com/roo-rb/roo">https://github.com/roo-rb/roo</a>] (<a href="https://github.com/roo-rb/roo">https://github.com/roo-rb/roo</a>)
<a href="http://railscasts.com/episodes/396-importing-csv-and-excel?autoplay=true">Railscasts</a></p>
]]></content>
  </entry>
  
</feed>
