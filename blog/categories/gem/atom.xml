<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gem | 熊爸天下]]></title>
  <link href="http://jimmy0328.github.io/blog/categories/gem/atom.xml" rel="self"/>
  <link href="http://jimmy0328.github.io/"/>
  <updated>2016-06-20T22:48:35+08:00</updated>
  <id>http://jimmy0328.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Lin]]></name>
    <email><![CDATA[jimmy0328@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[使用 Roo Gem 來讀取 Excel 內容]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/19/roo-gem/"/>
    <updated>2016-06-19T22:24:45+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/19/roo-gem</id>
    <content type="html"><![CDATA[<h2>什麼是 roo</h2>

<p>用來方便讀取 xls, xlsx, csv 的檔案內容，最常用在匯入一些excel的資料
這邊會先介紹簡單的roo 使用，會在下一個剖份再來實作一個 web 上傳檔案可以匯入的功能</p>

<h2>如何使用</h2>

<pre><code class="`">  gem install roo
</code></pre>

<p> 另外如果有編碼的問題，請也一併用 iconv 來處理</p>

<h2>範例</h2>

<p>簡單的說明一下，假設我有一份 xlsx 的檔案，如下圖</p>

<p><img src="/images/roo/xlsx_file.png" alt="Alt text" /></p>

<p>接下來使用 roo 來簡單的讀取資料
這邊我寫一支簡單的ruby 來測試一下，所以當我執行 <code>Excel.import("../hotels.xlsx")</code> 就可以把我要的xlsx試著print出來</p>

<pre><code>require 'roo'
require 'iconv'


class Hotel
  def initialize(name, address, coordinates)
    @name = name
    @address = address
    @coordinates = coordinates
  end

  def print
    "#{@name} | #{@address} | #{@coordinates}"
  end
end

class Excel

  def self.import(file_path)
    xlsx = Roo::Spreadsheet.open(file_path)
    xlsx.first_row.upto(xlsx.last_row) do |row|
      name = xlsx.cell(row,'A')
      address = xlsx.cell(row,'B')
      coordinates = xlsx.cell(row,'C')
      puts Hotel.new(name, address, coordinates).print
    end
  end

end

Excel.import("../hotels.xlsx")
</code></pre>

<p>大功告成，下一篇再來實作一個檔案上傳可以import的功能</p>

<h2>參考資料</h2>

<p><a href="http://roo.rubyforge.org/">http://roo.rubyforge.org/</a>
[<a href="https://github.com/roo-rb/roo">https://github.com/roo-rb/roo</a>] (<a href="https://github.com/roo-rb/roo">https://github.com/roo-rb/roo</a>)
<a href="http://railscasts.com/episodes/396-importing-csv-and-excel?autoplay=true">Railscasts</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Settingslogic Gem 的使用]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/18/settingslogic/"/>
    <updated>2016-06-18T10:00:55+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/18/settingslogic</id>
    <content type="html"><![CDATA[<h2>什麼是 Settingslogic</h2>

<p>Settingslogic is a simple configuration / settings solution that uses an ERB enabled YAML file. It has been great for our apps, maybe you will enjoy it too. Settingslogic works with Rails, Sinatra, or any Ruby project.</p>

<p><a href="https://github.com/binarylogic/settingslogic">Git source</a></p>

<h2>安裝</h2>

<p>Rails Gemfile中使用</p>

<pre><code>gem 'settingslogic'
</code></pre>

<p>記得 bundle install</p>

<h2>使用</h2>

<p>在Rails model中建立一支 models class, 例如 : Fee</p>

<pre><code>ass Fee &lt; Settingslogic

  source "#{Rails.root}/config/fee.yml"
  namespace Rails.env

end
</code></pre>

<p>在 config 中 增新一支 fee.yml
```
defaults: &amp;default
  salary:
    sales: 0
    staff: 0
    staff_overtime: 0</p>

<p>```</p>

<p>大功告成</p>

<h2>測試</h2>

<p>在 Rails console 中就可以直接類似 Rails model 的方式操作它了</p>

<p>例如: <code>Fee.salary</code></p>

<p><img src="/images/settingslogic/settingslogic_test.png" alt="Alt text" /></p>
]]></content>
  </entry>
  
</feed>
