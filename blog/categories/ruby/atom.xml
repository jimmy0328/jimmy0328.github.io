<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | 熊爸天下]]></title>
  <link href="http://jimmy0328.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://jimmy0328.github.io/"/>
  <updated>2016-06-21T17:10:15+08:00</updated>
  <id>http://jimmy0328.github.io/</id>
  <author>
    <name><![CDATA[Jimmy Lin]]></name>
    <email><![CDATA[jimmy0328@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby 中的block 及 Proc]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/21/ruby-block-proc/"/>
    <updated>2016-06-21T11:23:17+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/21/ruby-block-proc</id>
    <content type="html"><![CDATA[<h2>Block</h2>

<p>目前最常見的寫法都是用block，主要是使用 do end 來構成一個block，例如</p>

<pre><code>arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

arr.collect! do |n|
  n * 2
end
</code></pre>

<p>自己來寫一個看看</p>

<pre><code>class Array
  def foreach
    self.each_with_index do |n, i|
      self[i] = yield(n)
    end
  end
end

arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
arr.foreach do |n|
  n * 2
end
</code></pre>

<h2>Proc</h2>

<p>這二種寫proc都可以
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>proc = Proc.new { puts &ldquo;this is proc new&rdquo;}
</span><span class='line'>proc.call&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;proc = Proc.new do
</span><span class='line'>  puts &ldquo;this is proc block too&rdquo;
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;proc.call&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>使用lambda 的方式
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;proc = lambda{ puts &ldquo;lambda&rdquo;}
</span><span class='line'>proc.call&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;proc = -&gt; { puts &ldquo;lambda too&rdquo;}
</span><span class='line'>proc.call</span></code></pre></td></tr></table></div></figure></p>

<h2>lambda to block</h2>

<p>printer 是一個lambda ，因為在 pls.each 後只能放block，但可以透過 &amp; 來將block 轉成 proc
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pls = [&ldquo;Ruby&rdquo;, &ldquo;Python&rdquo;, &ldquo;Java&rdquo;, &ldquo;PHP&rdquo;, &ldquo;Node&rdquo;]
</span><span class='line'>pls.each do |pl|
</span><span class='line'> puts &ldquo;I like #{pl} &rdquo;
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;printer = lambda{|pl| puts &ldquo;I like #{pl}, too &rdquo; }
</span><span class='line'>pls.each(&amp;printer)&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;pre&gt;&lt;code&gt;
</span><span class='line'>
</span><span class='line'>另外有常見的二種寫法，結果是一樣的
</span><span class='line'>&lt;/code&gt;&lt;/pre&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt; tweets.map { |tweet| tweet.user }
</span><span class='line'> tweets.map(&amp;:user)</span></code></pre></td></tr></table></div></figure></p>

<h2>option block</h2>

<p>可以使用 block_given? 來判斷傳入的是不是block
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class Timeline
</span><span class='line'>  attr_accessor :tweets&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;  def print
</span><span class='line'>    if block_given?
</span><span class='line'>      tweets.each { |tweet| puts yield tweet }
</span><span class='line'>    else
</span><span class='line'>      puts tweets.join(&ldquo;, &rdquo;)
</span><span class='line'>    end
</span><span class='line'>  end
</span><span class='line'>end&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;timeline = Timeline.new
</span><span class='line'>timeline.tweets = [&ldquo;Ruby&rdquo;, &ldquo;Python&rdquo;, &ldquo;Java&rdquo;, &ldquo;PHP&rdquo;, &ldquo;Node&rdquo;]&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;timeline.print
</span><span class='line'>timeline.print { |tweet|
</span><span class='line'> &ldquo;tweet: #{tweet}&rdquo;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></p>

<h2>心得</h2>

<p>block 、 Proc 、lambda  都一直都很容易混亂的，所以這個部份我也常常都要回來重新查一下觀念及寫法</p>

<h2>參考資料</h2>

<ul>
<li>CodeSchool</li>
<li>[<a href="http://rubyer.me/blog/917/">http://rubyer.me/blog/917/</a>] (<a href="http://rubyer.me/blog/917/">http://rubyer.me/blog/917/</a>)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby 裡的class Method 與 Instance Method 使用方式]]></title>
    <link href="http://jimmy0328.github.io/blog/2016/06/16/class-method-and-instance-method/"/>
    <updated>2016-06-16T10:14:25+08:00</updated>
    <id>http://jimmy0328.github.io/blog/2016/06/16/class-method-and-instance-method</id>
    <content type="html"><![CDATA[<h2>Instance Method</h2>

<p>簡單的說就是要先建立一個實體才能使用裡面的方法</p>

<pre><code>class User

  def initialize(name)
    @name = name
  end

  # Instance method
  def say_hello
    "Hello, #{@name}"
  end

end
</code></pre>

<h4>使用方式</h4>

<pre><code>user = User.new("Ruby")
user.say_hello # =&gt; Hello, ruby
</code></pre>

<h4>說明</h4>

<p>必須建立實體之後才能調用物件內的方式
所以我們是不能直接用 User.say_hello</p>

<h2>Class Method</h2>

<pre><code>class Group

  def self.name
    "Kaohsiung Rails Meetup"
  end

  class &lt;&lt; self
    def find(user_id)
      "find group user with the id of #{user_id}"
    end
  end
end
</code></pre>

<h4>使用方式</h4>

<pre><code>puts Group.name # =&gt; Kaohsiung Rails Meetup
puts Group.find(1) # =&gt; find group user with the is of 1
</code></pre>

<h4>說明</h4>

<p>我最常使用的會有這二種宣告方式</p>

<h2>Rails 中的 Class Method</h2>

<p>在 Rails 中使用 ActiveRecord modul 時，其實裡面有許多class method 的方式
最常見的就是 where, find, first&hellip;等</p>

<pre><code> class Group &lt; ActiveRecord::Base

   scope :active -&gt; { where state: 'active'}
   scope :inactive -&gt; {where state: 'inactive'}

   def permalink
     xxxxxxxx
   end

 end
</code></pre>

<p>除了ruby 上面的二種宣告class method 的方式，在Rails中還可以使用scope 的方式來達到效果
如果你有在寫Rails的話，scope 的使用方式就應該很熟了</p>

<pre><code> 1. Group.active
 2. Group.find
 3. Group.first
</code></pre>

<p>打完收工</p>
]]></content>
  </entry>
  
</feed>
